{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Tactical RMM Documentation \u00b6 Tactical RMM is a remote monitoring & management tool for Windows computers, built with Django, Vue and Golang. It uses an agent written in Golang and integrates with MeshCentral LIVE DEMO \u00b6 Features \u00b6 Teamviewer-like remote desktop control Real-time remote shell Remote file browser (download and upload files) Remote command and script execution (batch, powershell and python scripts) Event log viewer Services management Windows patch management Automated checks with email/SMS alerting (cpu, disk, memory, services, scripts, event logs) Automated task runner (run scripts on a schedule) Remote software installation via chocolatey Software and hardware inventory","title":"Home"},{"location":"#tactical-rmm-documentation","text":"Tactical RMM is a remote monitoring & management tool for Windows computers, built with Django, Vue and Golang. It uses an agent written in Golang and integrates with MeshCentral","title":"Tactical RMM Documentation"},{"location":"#live-demo","text":"","title":"LIVE DEMO"},{"location":"#features","text":"Teamviewer-like remote desktop control Real-time remote shell Remote file browser (download and upload files) Remote command and script execution (batch, powershell and python scripts) Event log viewer Services management Windows patch management Automated checks with email/SMS alerting (cpu, disk, memory, services, scripts, event logs) Automated task runner (run scripts on a schedule) Remote software installation via chocolatey Software and hardware inventory","title":"Features"},{"location":"3rdparty_anydesk/","text":"AnyDesk \u00b6 AnyDesk Integration \u00b6 Info You can setup a full automation policy to collect the machine GUID but this example will collect from just one agent for testing purposes. From the UI go to Settings > Global Settings > CUSTOM FIELDS > Agents Add Custom Field Target = Agent Name = AnyNetID Field Type = Text While in Global Settings go to URL ACTIONS Add a URL Action Name = AnyDesk Control Description = Connect to a AnyDesk Session URL Pattern = anydesk:{{agent.AnyNetID}} Navigate to an agent with AnyDesk running (or apply using Settings > Automation Manager ). Go to Tasks. Add Task Select Script = AnyDesk - Get AnyNetID for client (this is a builtin script from script library) Descriptive name of task = Collects the AnyNetID for AnyDesk. Collector Task = CHECKED Custom Field to update = AnyNetID Click Next Check Manual Click Add Task Right click on the newly created task and click Run Task Now . Give it a second to execute then right click the agent that you are working with and go to Run URL Action > AnyDesk Control It launch the session in AnyDesk.","title":"AnyDesk"},{"location":"3rdparty_anydesk/#anydesk","text":"","title":"AnyDesk"},{"location":"3rdparty_anydesk/#anydesk-integration","text":"Info You can setup a full automation policy to collect the machine GUID but this example will collect from just one agent for testing purposes. From the UI go to Settings > Global Settings > CUSTOM FIELDS > Agents Add Custom Field Target = Agent Name = AnyNetID Field Type = Text While in Global Settings go to URL ACTIONS Add a URL Action Name = AnyDesk Control Description = Connect to a AnyDesk Session URL Pattern = anydesk:{{agent.AnyNetID}} Navigate to an agent with AnyDesk running (or apply using Settings > Automation Manager ). Go to Tasks. Add Task Select Script = AnyDesk - Get AnyNetID for client (this is a builtin script from script library) Descriptive name of task = Collects the AnyNetID for AnyDesk. Collector Task = CHECKED Custom Field to update = AnyNetID Click Next Check Manual Click Add Task Right click on the newly created task and click Run Task Now . Give it a second to execute then right click the agent that you are working with and go to Run URL Action > AnyDesk Control It launch the session in AnyDesk.","title":"AnyDesk Integration"},{"location":"3rdparty_bitdefender_gravityzone/","text":"BitDefender GravityZone Deployment \u00b6 How to Deploy BitDefender GravityZone \u00b6 From the UI go to Settings > Global Settings > CUSTOM FIELDS > Clients Add a Custom Field First: Target = CLIENTS Name = bdurl Field Type = Text Log into your GravityZone and on the left hand side, select \"Packages\" under \"Network\". Select the client you are working with and click \"Send Download Links\" at the top. Copy the appropriate download link Paste download link into the bdurl when you right click your target clients name in the RMM. Right click the Agent you want to deploy to and Run Script . Select BitDefender GravityZone Install and set timeout for 1800 seconds. Install time will vary based on internet speed and other AV removal by BitDefender BEST deployment","title":"BitDefender GravityZone"},{"location":"3rdparty_bitdefender_gravityzone/#bitdefender-gravityzone-deployment","text":"","title":"BitDefender GravityZone Deployment"},{"location":"3rdparty_bitdefender_gravityzone/#how-to-deploy-bitdefender-gravityzone","text":"From the UI go to Settings > Global Settings > CUSTOM FIELDS > Clients Add a Custom Field First: Target = CLIENTS Name = bdurl Field Type = Text Log into your GravityZone and on the left hand side, select \"Packages\" under \"Network\". Select the client you are working with and click \"Send Download Links\" at the top. Copy the appropriate download link Paste download link into the bdurl when you right click your target clients name in the RMM. Right click the Agent you want to deploy to and Run Script . Select BitDefender GravityZone Install and set timeout for 1800 seconds. Install time will vary based on internet speed and other AV removal by BitDefender BEST deployment","title":"How to Deploy BitDefender GravityZone"},{"location":"3rdparty_grafana/","text":"Adding Grafana to Tactical RMM \u00b6 Adding graphical Dashboards to Tactical. See https://github.com/dinger1986/TRMM-Grafana","title":"Grafana"},{"location":"3rdparty_grafana/#adding-grafana-to-tactical-rmm","text":"Adding graphical Dashboards to Tactical. See https://github.com/dinger1986/TRMM-Grafana","title":"Adding Grafana to Tactical RMM"},{"location":"3rdparty_screenconnect/","text":"Screenconnect / Connectwise Control \u00b6 Connectwise Control Integration \u00b6 Info To make this work you will need the name of a the Service from one of your agents running a Screen Connect Guest. Info You can setup a full automation policy to collect the machine GUID but this example will collect from just one agent for testing purposes. From the UI go to Settings > Global Settings > CUSTOM FIELDS > Agents Add Custom Field Target = Client Name = ScreenConnectService Field Type = Text Default Value = The name of your SC Service eg. ScreenConnect Client (XXXXXXXXXXXXXXXXX) Add Custom Field Target = Agent Name = ScreenConnectGUID Field Type = Text While in Global Settings go to URL ACTIONS Add a URL Action Name = ScreenConnect Description = Launch Screen Connect Session URL Pattern = https:// < your_screenconnect_fqdn_with_port > /Host#Access/All%20Machines//{{agent.ScreenConnectGUID}}/Join Navigate to an agent with ConnectWise Service running (or apply using Settings > Automation Manager ). Go to Tasks. Add Task Select Script = ScreenConnect - Get GUID for client (this is a builtin script from script library) Script argument = -serviceName{{client.ScreenConnectService}} Descriptive name of task = Collects the Machine GUID for ScreenConnect. Collector Task = CHECKED Custom Field to update = ScreenConectGUID Click Next Check Manual Click Add Task Right click on the newly created task and click Run Task Now . Give it a second to execute then right click the agent that you are working with and go to Run URL Action > ScreenConnect It should ask you to sign into your Connectwise Control server if you are not already logged in and launch the session. Install Tactical RMM via Screeconnect commands window \u00b6 Create a Deplopment under Agents > Manage Deployments Replace <deployment URL> below with your Deployment Download Link. x64 #!ps #maxlength=500000 #timeout=600000 Invoke-WebRequest \"<deployment URL>\" -OutFile ( New-Item -Path \"C:\\temp\\trmminstallx64.exe\" -Force ) $proc = Start-Process c:\\temp\\trmminstallx64.exe -ArgumentList '-silent' -PassThru Wait-Process -InputObject $proc if ($proc.ExitCode -ne 0) { Write-Warning \"$_ exited with status code $($proc.ExitCode)\" } Remove-Item -Path \"c:\\temp\\trmminstallx64.exe\" -Force x86 #!ps #maxlength=500000 #timeout=600000 Invoke-WebRequest \"<deployment URL>\" -OutFile ( New-Item -Path \"C:\\temp\\trmminstallx86.exe\" -Force ) $proc = Start-Process c:\\temp\\trmminstallx86.exe -ArgumentList '-silent' -PassThru Wait-Process -InputObject $proc if ($proc.ExitCode -ne 0) { Write-Warning \"$_ exited with status code $($proc.ExitCode)\" } Remove-Item -Path \"c:\\temp\\trmminstallx86.exe\" -Force","title":"Connectwise Control / Screenconnect"},{"location":"3rdparty_screenconnect/#screenconnect-connectwise-control","text":"","title":"Screenconnect / Connectwise Control"},{"location":"3rdparty_screenconnect/#connectwise-control-integration","text":"Info To make this work you will need the name of a the Service from one of your agents running a Screen Connect Guest. Info You can setup a full automation policy to collect the machine GUID but this example will collect from just one agent for testing purposes. From the UI go to Settings > Global Settings > CUSTOM FIELDS > Agents Add Custom Field Target = Client Name = ScreenConnectService Field Type = Text Default Value = The name of your SC Service eg. ScreenConnect Client (XXXXXXXXXXXXXXXXX) Add Custom Field Target = Agent Name = ScreenConnectGUID Field Type = Text While in Global Settings go to URL ACTIONS Add a URL Action Name = ScreenConnect Description = Launch Screen Connect Session URL Pattern = https:// < your_screenconnect_fqdn_with_port > /Host#Access/All%20Machines//{{agent.ScreenConnectGUID}}/Join Navigate to an agent with ConnectWise Service running (or apply using Settings > Automation Manager ). Go to Tasks. Add Task Select Script = ScreenConnect - Get GUID for client (this is a builtin script from script library) Script argument = -serviceName{{client.ScreenConnectService}} Descriptive name of task = Collects the Machine GUID for ScreenConnect. Collector Task = CHECKED Custom Field to update = ScreenConectGUID Click Next Check Manual Click Add Task Right click on the newly created task and click Run Task Now . Give it a second to execute then right click the agent that you are working with and go to Run URL Action > ScreenConnect It should ask you to sign into your Connectwise Control server if you are not already logged in and launch the session.","title":"Connectwise Control Integration"},{"location":"3rdparty_screenconnect/#install-tactical-rmm-via-screeconnect-commands-window","text":"Create a Deplopment under Agents > Manage Deployments Replace <deployment URL> below with your Deployment Download Link. x64 #!ps #maxlength=500000 #timeout=600000 Invoke-WebRequest \"<deployment URL>\" -OutFile ( New-Item -Path \"C:\\temp\\trmminstallx64.exe\" -Force ) $proc = Start-Process c:\\temp\\trmminstallx64.exe -ArgumentList '-silent' -PassThru Wait-Process -InputObject $proc if ($proc.ExitCode -ne 0) { Write-Warning \"$_ exited with status code $($proc.ExitCode)\" } Remove-Item -Path \"c:\\temp\\trmminstallx64.exe\" -Force x86 #!ps #maxlength=500000 #timeout=600000 Invoke-WebRequest \"<deployment URL>\" -OutFile ( New-Item -Path \"C:\\temp\\trmminstallx86.exe\" -Force ) $proc = Start-Process c:\\temp\\trmminstallx86.exe -ArgumentList '-silent' -PassThru Wait-Process -InputObject $proc if ($proc.ExitCode -ne 0) { Write-Warning \"$_ exited with status code $($proc.ExitCode)\" } Remove-Item -Path \"c:\\temp\\trmminstallx86.exe\" -Force","title":"Install Tactical RMM via Screeconnect commands window"},{"location":"3rdparty_teamviewer/","text":"TeamViewer \u00b6 TeamViewer Integration \u00b6 Info You can setup a full automation policy to collect the machine GUID but this example will collect from just one agent for testing purposes. From the UI go to Settings > Global Settings > CUSTOM FIELDS > Agents Add Custom Field Target = Agent Name = TeamViewerClientID Field Type = Text While in Global Settings go to URL ACTIONS Add a URL Action Name = TeamViewer Control Description = Connect to a Team Viewer Session URL Pattern = https://start.teamviewer.com/device/{{agent.TeamViewerClientID}}/authorization/password/mode/control Navigate to an agent with TeamViewer running (or apply using Settings > Automation Manager ). Go to Tasks. Add Task Select Script = TeamViewer - Get ClientID for client (this is a builtin script from script library) Descriptive name of task = Collects the ClientID for TeamViewer. Collector Task = CHECKED Custom Field to update = TeamViewerClientID Click Next Check Manual Click Add Task Right click on the newly created task and click Run Task Now . Give it a second to execute then right click the agent that you are working with and go to Run URL Action > TeamViewer Control It launch the session and possibly promt for password in TeamViewer.","title":"TeamViewer"},{"location":"3rdparty_teamviewer/#teamviewer","text":"","title":"TeamViewer"},{"location":"3rdparty_teamviewer/#teamviewer-integration","text":"Info You can setup a full automation policy to collect the machine GUID but this example will collect from just one agent for testing purposes. From the UI go to Settings > Global Settings > CUSTOM FIELDS > Agents Add Custom Field Target = Agent Name = TeamViewerClientID Field Type = Text While in Global Settings go to URL ACTIONS Add a URL Action Name = TeamViewer Control Description = Connect to a Team Viewer Session URL Pattern = https://start.teamviewer.com/device/{{agent.TeamViewerClientID}}/authorization/password/mode/control Navigate to an agent with TeamViewer running (or apply using Settings > Automation Manager ). Go to Tasks. Add Task Select Script = TeamViewer - Get ClientID for client (this is a builtin script from script library) Descriptive name of task = Collects the ClientID for TeamViewer. Collector Task = CHECKED Custom Field to update = TeamViewerClientID Click Next Check Manual Click Add Task Right click on the newly created task and click Run Task Now . Give it a second to execute then right click the agent that you are working with and go to Run URL Action > TeamViewer Control It launch the session and possibly promt for password in TeamViewer.","title":"TeamViewer Integration"},{"location":"backup/","text":"Backing up the RMM \u00b6 A backup script is provided for quick and easy way to backup all settings into one file to move to another server. Download the backup script: wget -N https://raw.githubusercontent.com/wh1te909/tacticalrmm/master/backup.sh From the Web UI, click Tools > Server Maintenance Choose Prune DB Tables from the dropdown and check the Audit Log and Pending Actions checkboxes, and then click Submit Doing a prune first before running the backup will significantly speed up the postgres vacuum command that is run during backup. Run the backup script chmod +x backup.sh ./backup.sh The backup tar file will be saved in /rmmbackups with the following format: rmm-backup-CURRENTDATETIME.tar","title":"Backup"},{"location":"backup/#backing-up-the-rmm","text":"A backup script is provided for quick and easy way to backup all settings into one file to move to another server. Download the backup script: wget -N https://raw.githubusercontent.com/wh1te909/tacticalrmm/master/backup.sh From the Web UI, click Tools > Server Maintenance Choose Prune DB Tables from the dropdown and check the Audit Log and Pending Actions checkboxes, and then click Submit Doing a prune first before running the backup will significantly speed up the postgres vacuum command that is run during backup. Run the backup script chmod +x backup.sh ./backup.sh The backup tar file will be saved in /rmmbackups with the following format: rmm-backup-CURRENTDATETIME.tar","title":"Backing up the RMM"},{"location":"code_signing/","text":"Code Signing \u00b6 Version added: Tactical RMM v0.6.0 / Agent v1.5.0 Tactical RMM agents are now code signed ! To get access to code signed agents, you must be a Github Sponsor with a minumum monthly donation of $50.00 Once you have become a sponsor, please email support@amidaware.com with your Github username (and Discord username if you're on our Discord ) Please allow up to 24 hours for a response You will then be sent a code signing auth token, which you should enter into Tactical's web UI from Settings > Code Signing How does it work? \u00b6 Everytime you generate an agent or an agent does a self-update, your self-hosted instance sends a request to Tactical's code signing servers with your auth token. If the token is valid, the server sends you back a code signed agent. If not, it sends you back the un-signed agent. If you think your auth token has been compromised or stolen then please email support or contact wh1te909 on discord to get a new token / invalidate the old one.","title":"Code Signing"},{"location":"code_signing/#code-signing","text":"Version added: Tactical RMM v0.6.0 / Agent v1.5.0 Tactical RMM agents are now code signed ! To get access to code signed agents, you must be a Github Sponsor with a minumum monthly donation of $50.00 Once you have become a sponsor, please email support@amidaware.com with your Github username (and Discord username if you're on our Discord ) Please allow up to 24 hours for a response You will then be sent a code signing auth token, which you should enter into Tactical's web UI from Settings > Code Signing","title":"Code Signing"},{"location":"code_signing/#how-does-it-work","text":"Everytime you generate an agent or an agent does a self-update, your self-hosted instance sends a request to Tactical's code signing servers with your auth token. If the token is valid, the server sends you back a code signed agent. If not, it sends you back the un-signed agent. If you think your auth token has been compromised or stolen then please email support or contact wh1te909 on discord to get a new token / invalidate the old one.","title":"How does it work?"},{"location":"contributing/","text":"Contributing \u00b6 Contributing to the docs \u00b6 Docs are built with MKDocs for Material To setup a local environment to add/edit to this documentation site: mkdir ~/rmmdocs && cd ~/rmmdocs git clone https://github.com/wh1te909/tacticalrmm.git . python3 -m venv env source env/bin/activate pip install --upgrade pip pip install --upgrade setuptools wheel pip install -r api/tacticalrmm/requirements-dev.txt cd docs mkdocs serve Open your browser and navigate to http://yourserverip:8005 Add/edit markdown files in the docs/docs folder and you'll see live changes at the url above. Edit docs/mkdocs.yml to edit structure and add new files. Full mkdocs documentation here Once finished, create a pull request to the develop branch for review.","title":"Contributing to Docs"},{"location":"contributing/#contributing","text":"","title":"Contributing"},{"location":"contributing/#contributing-to-the-docs","text":"Docs are built with MKDocs for Material To setup a local environment to add/edit to this documentation site: mkdir ~/rmmdocs && cd ~/rmmdocs git clone https://github.com/wh1te909/tacticalrmm.git . python3 -m venv env source env/bin/activate pip install --upgrade pip pip install --upgrade setuptools wheel pip install -r api/tacticalrmm/requirements-dev.txt cd docs mkdocs serve Open your browser and navigate to http://yourserverip:8005 Add/edit markdown files in the docs/docs folder and you'll see live changes at the url above. Edit docs/mkdocs.yml to edit structure and add new files. Full mkdocs documentation here Once finished, create a pull request to the develop branch for review.","title":"Contributing to the docs"},{"location":"contributing_community_scripts/","text":"Script Library Naming Conventions \u00b6 File names \u00b6 Under /scripts the file name should generally follow this format: (Platform)_(Category or Function)_(What It Does).xxx Info Although Tactical RMM only has a Windows agent for now, we're planning for a future with more platform support Platform for now are: Win OSX Linux iOS Android Good filename examples include: Win_Azure_Mars_Cloud_Backup_Status.ps1 Win_AzureAD_Check_Connection_Status.ps1 Win_Network_DHCP_Set.bat Win_Network_DNS_Set_to_1.1.1.2.ps1 Info This is so that at a glance you can see if there is already a script with that function, and you can avoid duplication of functionality. If you can improve a script or allow Script Arguments/Parameters update existing if possible Name field (in community_scripts.json) \u00b6 Consider they are viewed in 3 different locations: Script Manager List View (sortable by any column) Folder View (Grouped by Categories) Run or Add script Running scripts manually or adding tasks (or adding in Automation Manager) Info A good max length is 50-60 chars or less for display in these 3 locations Make sure your Name roughly follows the order of file naming as above Category or Function - What It Does Consider how the alphabetic sort will affect display Making Script Files \u00b6 Good Habits \u00b6 Try and make them fully self-contained. If they pull data from elsewhere, create comment notes at the top with references for others to audit/validate Good folder locations to use for standardized things: c:\\ProgramData\\TacticalRMM\\ c:\\ProgramData\\TacticalRMM\\scripts c:\\ProgramData\\TacticalRMM\\toolbox c:\\ProgramData\\TacticalRMM\\logs c:\\ProgramData\\TacticalRMM\\temp c:\\ProgramData\\TacticalRMM\\ Command Parameters are good. Optional command parameters for extra functions are better. Add standardized Comment headers to scripts (include the first 2, more if appropriate): <# .Synopsis Short description eg Check IP address .DESCRIPTION Long description eg Checks IP address on all local network adapters, and returns results .EXAMPLE Example of how to use this cmdlet .EXAMPLE Another example of how to use this cmdlet .INPUTS Inputs to this cmdlet (if any) .OUTPUTS Output from this cmdlet (if any) .NOTES General notes eg v1.0 .COMPONENT The component this cmdlet belongs to .ROLE The role this cmdlet belongs to .FUNCTIONALITY The functionality that best describes this cmdlet #> Bad Habits \u00b6 Assumes non-standard configurations Doesn't play well with other community scripts (reused names etc.) Useful Reference Script Examples \u00b6 RunAsUser (since Tactical RMM runs as system) https://github.com/wh1te909/tacticalrmm/blob/develop/scripts/Win_Display_Message_To_User.ps1 Command Paramater Ninja https://github.com/wh1te909/tacticalrmm/blob/develop/scripts/Win_ScreenConnectAIO.ps1 Optional Command Parameters and testing for errors https://github.com/wh1te909/tacticalrmm/blob/develop/scripts/Win_Rename_Computer.ps1 Volunteers Needed \u00b6 If you want to contribute back to the project there are a lot of scripts that need some TLC (Tender Loving Care) please paruse thru them here: https://github.com/wh1te909/tacticalrmm/tree/develop/scripts_wip Discuss/ask questions in the Discord group here What you can add is: Add standardized Comment headers per above Parameterize scripts where appropriate Add $ExitCode and error conditions as appropriate Contact @silversword in Discord if you need help doing Github additions/edits/adding to the community Library and have questions about Script Library Naming Conventions","title":"Contributing to Community Scripts"},{"location":"contributing_community_scripts/#script-library-naming-conventions","text":"","title":"Script Library Naming Conventions"},{"location":"contributing_community_scripts/#file-names","text":"Under /scripts the file name should generally follow this format: (Platform)_(Category or Function)_(What It Does).xxx Info Although Tactical RMM only has a Windows agent for now, we're planning for a future with more platform support Platform for now are: Win OSX Linux iOS Android Good filename examples include: Win_Azure_Mars_Cloud_Backup_Status.ps1 Win_AzureAD_Check_Connection_Status.ps1 Win_Network_DHCP_Set.bat Win_Network_DNS_Set_to_1.1.1.2.ps1 Info This is so that at a glance you can see if there is already a script with that function, and you can avoid duplication of functionality. If you can improve a script or allow Script Arguments/Parameters update existing if possible","title":"File names"},{"location":"contributing_community_scripts/#name-field-in-community_scriptsjson","text":"Consider they are viewed in 3 different locations: Script Manager List View (sortable by any column) Folder View (Grouped by Categories) Run or Add script Running scripts manually or adding tasks (or adding in Automation Manager) Info A good max length is 50-60 chars or less for display in these 3 locations Make sure your Name roughly follows the order of file naming as above Category or Function - What It Does Consider how the alphabetic sort will affect display","title":"Name field (in community_scripts.json)"},{"location":"contributing_community_scripts/#making-script-files","text":"","title":"Making Script Files"},{"location":"contributing_community_scripts/#good-habits","text":"Try and make them fully self-contained. If they pull data from elsewhere, create comment notes at the top with references for others to audit/validate Good folder locations to use for standardized things: c:\\ProgramData\\TacticalRMM\\ c:\\ProgramData\\TacticalRMM\\scripts c:\\ProgramData\\TacticalRMM\\toolbox c:\\ProgramData\\TacticalRMM\\logs c:\\ProgramData\\TacticalRMM\\temp c:\\ProgramData\\TacticalRMM\\ Command Parameters are good. Optional command parameters for extra functions are better. Add standardized Comment headers to scripts (include the first 2, more if appropriate): <# .Synopsis Short description eg Check IP address .DESCRIPTION Long description eg Checks IP address on all local network adapters, and returns results .EXAMPLE Example of how to use this cmdlet .EXAMPLE Another example of how to use this cmdlet .INPUTS Inputs to this cmdlet (if any) .OUTPUTS Output from this cmdlet (if any) .NOTES General notes eg v1.0 .COMPONENT The component this cmdlet belongs to .ROLE The role this cmdlet belongs to .FUNCTIONALITY The functionality that best describes this cmdlet #>","title":"Good Habits"},{"location":"contributing_community_scripts/#bad-habits","text":"Assumes non-standard configurations Doesn't play well with other community scripts (reused names etc.)","title":"Bad Habits"},{"location":"contributing_community_scripts/#useful-reference-script-examples","text":"RunAsUser (since Tactical RMM runs as system) https://github.com/wh1te909/tacticalrmm/blob/develop/scripts/Win_Display_Message_To_User.ps1 Command Paramater Ninja https://github.com/wh1te909/tacticalrmm/blob/develop/scripts/Win_ScreenConnectAIO.ps1 Optional Command Parameters and testing for errors https://github.com/wh1te909/tacticalrmm/blob/develop/scripts/Win_Rename_Computer.ps1","title":"Useful Reference Script Examples"},{"location":"contributing_community_scripts/#volunteers-needed","text":"If you want to contribute back to the project there are a lot of scripts that need some TLC (Tender Loving Care) please paruse thru them here: https://github.com/wh1te909/tacticalrmm/tree/develop/scripts_wip Discuss/ask questions in the Discord group here What you can add is: Add standardized Comment headers per above Parameterize scripts where appropriate Add $ExitCode and error conditions as appropriate Contact @silversword in Discord if you need help doing Github additions/edits/adding to the community Library and have questions about Script Library Naming Conventions","title":"Volunteers Needed"},{"location":"contributing_using_devbox/","text":"Hidden docs, needs work For local Hyper-v Devbox notes From https://raw.githubusercontent.com/silversword411/tacticalrmm-devdocs Needs an official install_devbox.sh script Setup local devbox in hyper-v VM \u00b6 Install Ubuntu 20.04 LTS \u00b6 Don't forget to sudo apt-get updates && sudo apt-get upgrade Optional \u00b6 Set all users in sudo group not to require password every time: sudo visudo Add this: %sudo ALL=(ALL) NOPASSWD: ALL Download customized install script and tweak \u00b6 Create folder to dump into sudo mkdir /rmm sudo chown ${ USER } : ${ USER } -R /rmm cd /rmm Get dev install script wget https://raw.githubusercontent.com/silversword411/tacticalrmm-devdocs/blob/main/install_devbox.sh Edit, and search for REPLACEMEWITHYOURFORKEDREPOURL and replace with your forked repo URL (example commented out below) Run it \u00b6 ./install_devbox.sh Watch for \u00b6 !!!Note Unlike regular installs, don't worry about the QR code Celebrate \u00b6 Misc commands \u00b6 Start mkdocs on dev box \u00b6 cd /rmm/api source env/bin/activate pip install --upgrade pip pip install --upgrade setuptools wheel pip install -r tacticalrmm/requirements-dev.txt cd /rmm/docs mkdocs serve Running tests locally \u00b6 Prep and update source /rmm/api/env/bin/activate cd /rmm/api/tacticalrmm pip install -r requirements.txt Then run tests python manage.py test Misc Notes \u00b6 Spinning up front end web interface in development \u00b6 cd /web npm run serve","title":"Contributing using devbox"},{"location":"contributing_using_devbox/#setup-local-devbox-in-hyper-v-vm","text":"","title":"Setup local devbox in hyper-v VM"},{"location":"contributing_using_devbox/#install-ubuntu-2004-lts","text":"Don't forget to sudo apt-get updates && sudo apt-get upgrade","title":"Install Ubuntu 20.04 LTS"},{"location":"contributing_using_devbox/#optional","text":"Set all users in sudo group not to require password every time: sudo visudo Add this: %sudo ALL=(ALL) NOPASSWD: ALL","title":"Optional"},{"location":"contributing_using_devbox/#download-customized-install-script-and-tweak","text":"Create folder to dump into sudo mkdir /rmm sudo chown ${ USER } : ${ USER } -R /rmm cd /rmm Get dev install script wget https://raw.githubusercontent.com/silversword411/tacticalrmm-devdocs/blob/main/install_devbox.sh Edit, and search for REPLACEMEWITHYOURFORKEDREPOURL and replace with your forked repo URL (example commented out below)","title":"Download customized install script and tweak"},{"location":"contributing_using_devbox/#run-it","text":"./install_devbox.sh","title":"Run it"},{"location":"contributing_using_devbox/#watch-for","text":"!!!Note Unlike regular installs, don't worry about the QR code","title":"Watch for"},{"location":"contributing_using_devbox/#celebrate","text":"","title":"Celebrate"},{"location":"contributing_using_devbox/#misc-commands","text":"","title":"Misc commands"},{"location":"contributing_using_devbox/#start-mkdocs-on-dev-box","text":"cd /rmm/api source env/bin/activate pip install --upgrade pip pip install --upgrade setuptools wheel pip install -r tacticalrmm/requirements-dev.txt cd /rmm/docs mkdocs serve","title":"Start mkdocs on dev box"},{"location":"contributing_using_devbox/#running-tests-locally","text":"Prep and update source /rmm/api/env/bin/activate cd /rmm/api/tacticalrmm pip install -r requirements.txt Then run tests python manage.py test","title":"Running tests locally"},{"location":"contributing_using_devbox/#misc-notes","text":"","title":"Misc Notes"},{"location":"contributing_using_devbox/#spinning-up-front-end-web-interface-in-development","text":"cd /web npm run serve","title":"Spinning up front end web interface in development"},{"location":"contributing_using_docker/","text":"Install WSL2 \u00b6 https://docs.microsoft.com/en-us/windows/wsl/install-win10 Install Docker Desktop \u00b6 https://www.docker.com/products/docker-desktop Configure Docker \u00b6 Make sure it doesn't look like this This is better Check and make sure WSL is v2 and set Ubuntu as default \u00b6 https://docs.microsoft.com/en-us/windows/wsl/install-win10#set-your-distribution-version-to-wsl-1-or-wsl-2 Install VSCode Extensions \u00b6 Remote - Containers Docker Connect to WSL and clone your Github fork \u00b6 Create .env file \u00b6 Under .devcontainer duplicate .env.example as .env Customize to your tastes (it doesn't need to be internet configured, just add records in your hosts file) eg 127.0.0.1 rmm.example.com 127.0.0.1 api.example.com 127.0.0.1 mesh.example.com Launch your Dev VM in Docker \u00b6 Right-click docker-compose.yml and choose Compose Up Wait, it'll take a while as docker downloads all the modules and gets running. Develop! \u00b6 You're operational! Note Self-signed certs are in your dev environment. Navigate to https://api.example.com and https://rmm.example.com and accept the self signed certs to get rid of errors. View mkdocks live edits in browser \u00b6 Change stuff in /docs/docs/ mkdocs is Exposed on Port: 8005 Open: http://rmm.example.com:8005/ View django administration \u00b6 Open: http://rmm.example.com:8000/admin/","title":"Contributing using Docker"},{"location":"contributing_using_docker/#install-wsl2","text":"https://docs.microsoft.com/en-us/windows/wsl/install-win10","title":"Install WSL2"},{"location":"contributing_using_docker/#install-docker-desktop","text":"https://www.docker.com/products/docker-desktop","title":"Install Docker Desktop"},{"location":"contributing_using_docker/#configure-docker","text":"Make sure it doesn't look like this This is better","title":"Configure Docker"},{"location":"contributing_using_docker/#check-and-make-sure-wsl-is-v2-and-set-ubuntu-as-default","text":"https://docs.microsoft.com/en-us/windows/wsl/install-win10#set-your-distribution-version-to-wsl-1-or-wsl-2","title":"Check and make sure WSL is v2 and set Ubuntu as default"},{"location":"contributing_using_docker/#install-vscode-extensions","text":"Remote - Containers Docker","title":"Install VSCode Extensions"},{"location":"contributing_using_docker/#connect-to-wsl-and-clone-your-github-fork","text":"","title":"Connect to WSL and clone your Github fork"},{"location":"contributing_using_docker/#create-env-file","text":"Under .devcontainer duplicate .env.example as .env Customize to your tastes (it doesn't need to be internet configured, just add records in your hosts file) eg 127.0.0.1 rmm.example.com 127.0.0.1 api.example.com 127.0.0.1 mesh.example.com","title":"Create .env file"},{"location":"contributing_using_docker/#launch-your-dev-vm-in-docker","text":"Right-click docker-compose.yml and choose Compose Up Wait, it'll take a while as docker downloads all the modules and gets running.","title":"Launch your Dev VM in Docker"},{"location":"contributing_using_docker/#develop","text":"You're operational! Note Self-signed certs are in your dev environment. Navigate to https://api.example.com and https://rmm.example.com and accept the self signed certs to get rid of errors.","title":"Develop!"},{"location":"contributing_using_docker/#view-mkdocks-live-edits-in-browser","text":"Change stuff in /docs/docs/ mkdocs is Exposed on Port: 8005 Open: http://rmm.example.com:8005/","title":"View mkdocks live edits in browser"},{"location":"contributing_using_docker/#view-django-administration","text":"Open: http://rmm.example.com:8000/admin/","title":"View django administration"},{"location":"contributing_using_vscode/","text":"Getting Started \u00b6 1. Install vscode \u00b6 https://code.visualstudio.com/download 2. Fork Project in Github \u00b6 This is making a duplicate of the code under your Github that you can edit https://github.com/wh1te909/tacticalrmm 3. Add your (forked) repo to vscode \u00b6 Clone repository Login to your Github Choose local folder 3a. Install extra vscode Extensions \u00b6 GitLens Remote - SSH 4. Open Terminal \u00b6 https://code.visualstudio.com/docs/editor/integrated-terminal Ctrl+` 5. Configure a remote for your fork (in vscode) \u00b6 https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/configuring-a-remote-for-a-fork Configure your local fork and tell it where the original code repo is so you can compare and merge updates later when official repo is updated Check repos git remote -v Add upstream repo git remote add upstream https://github.com/wh1te909/tacticalrmm Confirm changes git remote -v 6. Contribute code \u00b6 Make changes to something. Commit (update something) and notate what you did Push (from your local vscode to your github fork) Open browser and look at your repo (It should reflect your commit) 6a. Request your changes to be pulled into the primary repo (Pull Request) \u00b6 In browser create pull request 7. Sync your local fork \u00b6 https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/syncing-a-fork Bring changes from original repo to your local vscode copy so you're current with changes made in original Github repo In VSCode open TERMINAL Ctrl+` Tell git to pull from the GitHub upstream repo all new changes into your local directory git pull --rebase upstream develop 7a. Push your local updated copy to your Github fork \u00b6 Then you're push ing that updated local repo to your online Github fork 8. Verify and Repeat \u00b6 Check your Github fork in browser, should be up to date now with original. Repeat 6 or 7 as necessary Reference \u00b6 Customizing the Admin Web Interface \u00b6 Created using quasar, it's all your .vue files in web/src/components/modals/agents/RunScript.vue Learn stuff here https://quasar.dev/","title":"Contributing using VSCode"},{"location":"contributing_using_vscode/#getting-started","text":"","title":"Getting Started"},{"location":"contributing_using_vscode/#1-install-vscode","text":"https://code.visualstudio.com/download","title":"1. Install vscode"},{"location":"contributing_using_vscode/#2-fork-project-in-github","text":"This is making a duplicate of the code under your Github that you can edit https://github.com/wh1te909/tacticalrmm","title":"2. Fork Project in Github"},{"location":"contributing_using_vscode/#3-add-your-forked-repo-to-vscode","text":"Clone repository Login to your Github Choose local folder","title":"3. Add your (forked) repo to vscode"},{"location":"contributing_using_vscode/#3a-install-extra-vscode-extensions","text":"GitLens Remote - SSH","title":"3a. Install extra vscode Extensions"},{"location":"contributing_using_vscode/#4-open-terminal","text":"https://code.visualstudio.com/docs/editor/integrated-terminal Ctrl+`","title":"4. Open Terminal"},{"location":"contributing_using_vscode/#5-configure-a-remote-for-your-fork-in-vscode","text":"https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/configuring-a-remote-for-a-fork Configure your local fork and tell it where the original code repo is so you can compare and merge updates later when official repo is updated Check repos git remote -v Add upstream repo git remote add upstream https://github.com/wh1te909/tacticalrmm Confirm changes git remote -v","title":"5. Configure a remote for your fork (in vscode)"},{"location":"contributing_using_vscode/#6-contribute-code","text":"Make changes to something. Commit (update something) and notate what you did Push (from your local vscode to your github fork) Open browser and look at your repo (It should reflect your commit)","title":"6. Contribute code"},{"location":"contributing_using_vscode/#6a-request-your-changes-to-be-pulled-into-the-primary-repo-pull-request","text":"In browser create pull request","title":"6a. Request your changes to be pulled into the primary repo (Pull Request)"},{"location":"contributing_using_vscode/#7-sync-your-local-fork","text":"https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/syncing-a-fork Bring changes from original repo to your local vscode copy so you're current with changes made in original Github repo In VSCode open TERMINAL Ctrl+` Tell git to pull from the GitHub upstream repo all new changes into your local directory git pull --rebase upstream develop","title":"7. Sync your local fork"},{"location":"contributing_using_vscode/#7a-push-your-local-updated-copy-to-your-github-fork","text":"Then you're push ing that updated local repo to your online Github fork","title":"7a. Push your local updated copy to your Github fork"},{"location":"contributing_using_vscode/#8-verify-and-repeat","text":"Check your Github fork in browser, should be up to date now with original. Repeat 6 or 7 as necessary","title":"8. Verify and Repeat"},{"location":"contributing_using_vscode/#reference","text":"","title":"Reference"},{"location":"contributing_using_vscode/#customizing-the-admin-web-interface","text":"Created using quasar, it's all your .vue files in web/src/components/modals/agents/RunScript.vue Learn stuff here https://quasar.dev/","title":"Customizing the Admin Web Interface"},{"location":"example_nginx/","text":"example of /etc/nginx/sites-available/rmm.conf DO NOT COPY PASTE INTO YOUR SERVER ONLY USE AS A REFERENCE server_tokens off; upstream tacticalrmm { server unix:////rmm/api/tacticalrmm/tacticalrmm.sock; } map $http_user_agent $ignore_ua { \"~python-requests.*\" 0; \"~go-resty.*\" 0; default 1; } server { listen 80; server_name api.example.com; return 301 https://$server_name$request_uri; } server { listen 443 ssl; server_name api.example.com; client_max_body_size 300M; access_log /rmm/api/tacticalrmm/tacticalrmm/private/log/access.log combined if=$ignore_ua; error_log /rmm/api/tacticalrmm/tacticalrmm/private/log/error.log; ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem; ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384'; location /static/ { root /rmm/api/tacticalrmm; } location /private/ { internal; add_header \"Access-Control-Allow-Origin\" \"https://rmm.example.com\"; alias /rmm/api/tacticalrmm/tacticalrmm/private/; } location ~ ^/(natsapi) { allow 127.0.0.1; deny all; uwsgi_pass tacticalrmm; include /etc/nginx/uwsgi_params; uwsgi_read_timeout 500s; uwsgi_ignore_client_abort on; } location ~ ^/ws/ { proxy_pass http://unix:/rmm/daphne.sock; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Host $server_name; } location / { uwsgi_pass tacticalrmm; include /etc/nginx/uwsgi_params; uwsgi_read_timeout 9999s; uwsgi_ignore_client_abort on; } }","title":"Example nginx"},{"location":"faq/","text":"FAQ \u00b6 How do I do X feature in the web UI? \u00b6 Alot of features in the web UI are hidden behind right-click menus; almost everything has a right click menu so if you don't see something, try right clicking on it. Where are the Linux / Mac agents? \u00b6 Linux / Mac agents are currently under development. Can I run Tactical RMM locally behind NAT without exposing anything to the internet? \u00b6 Yes, you will just need to setup local DNS for the 3 subdomains, either by editing host files on all your agents or through a local DNS server. I am locked out of the web UI. How do I reset my password? \u00b6 SSH into your server and run: /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py reset_password <username> How do I reset password or 2 factor token? \u00b6 From the web UI, click Settings > User Administration and then right-click on a user: Or from the command line: /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py reset_2fa <username> Then simply log out of the web UI and next time the user logs in they will be redirected to the 2FA setup page which will present a barcode to be scanned with the Authenticator app. How do I recover my MeshCentral login credentials? \u00b6 From Tactical's web UI: Settings > Global Settings > MeshCentral Copy the username then ssh into the server and run: cd /meshcentral/ sudo systemctl stop meshcentral node node_modules/meshcentral --resetaccount <username> --pass <newpassword> sudo systemctl start meshcentral Help! I've been hacked there are weird agents appearing in my Tactical RMM \u00b6 No, you haven't. Your installer was scanned by an antivirus. It didn't recognize the exe. You have the option enabled to submit unknown applications for analysis. They ran it against their virtualization testing cluster. You allow anyone to connect to your rmm server (you should look into techniques to hide your server from the internet). Here are some examples of what that looks like.","title":"FAQ"},{"location":"faq/#faq","text":"","title":"FAQ"},{"location":"faq/#how-do-i-do-x-feature-in-the-web-ui","text":"Alot of features in the web UI are hidden behind right-click menus; almost everything has a right click menu so if you don't see something, try right clicking on it.","title":"How do I do X feature in the web UI?"},{"location":"faq/#where-are-the-linux-mac-agents","text":"Linux / Mac agents are currently under development.","title":"Where are the Linux / Mac agents?"},{"location":"faq/#can-i-run-tactical-rmm-locally-behind-nat-without-exposing-anything-to-the-internet","text":"Yes, you will just need to setup local DNS for the 3 subdomains, either by editing host files on all your agents or through a local DNS server.","title":"Can I run Tactical RMM locally behind NAT without exposing anything to the internet?"},{"location":"faq/#i-am-locked-out-of-the-web-ui-how-do-i-reset-my-password","text":"SSH into your server and run: /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py reset_password <username>","title":"I am locked out of the web UI. How do I reset my password?"},{"location":"faq/#how-do-i-reset-password-or-2-factor-token","text":"From the web UI, click Settings > User Administration and then right-click on a user: Or from the command line: /rmm/api/env/bin/python /rmm/api/tacticalrmm/manage.py reset_2fa <username> Then simply log out of the web UI and next time the user logs in they will be redirected to the 2FA setup page which will present a barcode to be scanned with the Authenticator app.","title":"How do I reset password or 2 factor token?"},{"location":"faq/#how-do-i-recover-my-meshcentral-login-credentials","text":"From Tactical's web UI: Settings > Global Settings > MeshCentral Copy the username then ssh into the server and run: cd /meshcentral/ sudo systemctl stop meshcentral node node_modules/meshcentral --resetaccount <username> --pass <newpassword> sudo systemctl start meshcentral","title":"How do I recover my MeshCentral login credentials?"},{"location":"faq/#help-ive-been-hacked-there-are-weird-agents-appearing-in-my-tactical-rmm","text":"No, you haven't. Your installer was scanned by an antivirus. It didn't recognize the exe. You have the option enabled to submit unknown applications for analysis. They ran it against their virtualization testing cluster. You allow anyone to connect to your rmm server (you should look into techniques to hide your server from the internet). Here are some examples of what that looks like.","title":"Help! I've been hacked there are weird agents appearing in my Tactical RMM"},{"location":"howitallworks/","text":"How It All Works \u00b6 INSERT WIREFRAME GRAPHICS HERE USING SOMETHING LIKE https://www.yworks.com/yed-live/ 1) how nats-django-admin web interface work 2) Agent installer steps 3) Agent communication process with server (what ports to which services etc) 4) Agent checks/tasks and how they work on the workstation/interact with server Server \u00b6 Has a postgres database located here: Django Admin Description A web interface for the postgres database Services \u00b6 nginx Description Web server that handles https traffic Log located at /var/log/nginx tail /var/log/nginx Dependencies from here \u00b6 nats How communication between client and server bride NAT (Network Address Translation) celery Description Used to schedule tasks to be sent to Agent Log located at /var/log/celery tail /var/log/celery Django Description Framework to integrate the server to interact with browser future==0.18.2 loguru==0.5.3 msgpack==1.0.2 packaging==20.9 psycopg2-binary==2.9.1 pycparser==2.20 pycryptodome==3.10.1 pyotp==2.6.0 pyparsing==2.4.7 pytz==2021.1 qrcode Description For creating QR codes for 2FA redis==3.5.3 requests==2.25.1 six==1.16.0 sqlparse==0.4.1 twilio Description Python SMS notification integration urllib3==1.26.5 uWSGI==2.0.19.1 validators==0.18.2 vine==5.0.0 websockets==9.1 zipp==3.4.1 Windows Agent \u00b6 Found in %programfiles%\\TacticalAgent Services \u00b6 3 services exist on all clients Mesh Agent AND TacticalAgent and Tactical RMM RPC Service The MeshCentral system which is accessible from https://mesh.example.com and is used It runs 2 goroutines one is the checkrunner which runs all the checks and then just sleeps until it's time to run more checks 2nd goroutine periodically sends info about the agent to the rmm and also handles agent recovery Note In Task Manager you will see additional Tactical RMM Agent processes appear and disappear. These are your Checks and Tasks running at scheduled intervals Tactical RMM RPC Service Uses the pub/sub model so anytime you do anything realtime from rmm (like a send command or run script) It maintains a persistent connection to your to the api.example.com rmm server on port:4222 and is listening for events (using nats ) It handles your Agent updates (Auto triggers at 35mins past every hour or when run manually from server Agents | Update Agents menu) Agent Installation Process \u00b6 Adds Defender AV exclusions Copies temp files to c:\\windows\\temp\\tacticalxxx folder. INNO setup installs app into %ProgramData%\\TacticalAgent\\ folder Agent Update Process \u00b6 Downloads latest winagent-vx.x.x-x86/64.exe to %programfiles% Executes the file (INNO setup exe) Files create c:\\Windows\\temp\\Tacticalxxxx\\ folder for install (and log files) Windows Update Management \u00b6 Tactical RMM Agent sets: HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU AUOptions (REG_DWORD): 1: Keep my computer up to date is disabled in Automatic Updates. Uses this Microsoft API to handle updates: https://docs.microsoft.com/en-us/windows/win32/api/_wua/ Log files \u00b6 You can find 3 sets of detailed logs at /rmm/api/tacticalrmm/tacticalrmm/private/log error.log nginx log for all errors on all TRMM URL's: rmm, api and mesh access.log nginx log for access auditing on all URL's: rmm, api and mesh ( this is a large file, and should be cleaned periodically ) django_debug.log created by django webapp","title":"How It All Works"},{"location":"howitallworks/#how-it-all-works","text":"INSERT WIREFRAME GRAPHICS HERE USING SOMETHING LIKE https://www.yworks.com/yed-live/ 1) how nats-django-admin web interface work 2) Agent installer steps 3) Agent communication process with server (what ports to which services etc) 4) Agent checks/tasks and how they work on the workstation/interact with server","title":"How It All Works"},{"location":"howitallworks/#server","text":"Has a postgres database located here: Django Admin Description A web interface for the postgres database","title":"Server"},{"location":"howitallworks/#services","text":"nginx Description Web server that handles https traffic Log located at /var/log/nginx tail /var/log/nginx","title":"Services"},{"location":"howitallworks/#dependencies-from-here","text":"nats How communication between client and server bride NAT (Network Address Translation) celery Description Used to schedule tasks to be sent to Agent Log located at /var/log/celery tail /var/log/celery Django Description Framework to integrate the server to interact with browser future==0.18.2 loguru==0.5.3 msgpack==1.0.2 packaging==20.9 psycopg2-binary==2.9.1 pycparser==2.20 pycryptodome==3.10.1 pyotp==2.6.0 pyparsing==2.4.7 pytz==2021.1 qrcode Description For creating QR codes for 2FA redis==3.5.3 requests==2.25.1 six==1.16.0 sqlparse==0.4.1 twilio Description Python SMS notification integration urllib3==1.26.5 uWSGI==2.0.19.1 validators==0.18.2 vine==5.0.0 websockets==9.1 zipp==3.4.1","title":"Dependencies from here"},{"location":"howitallworks/#windows-agent","text":"Found in %programfiles%\\TacticalAgent","title":"Windows Agent"},{"location":"howitallworks/#services_1","text":"3 services exist on all clients Mesh Agent AND TacticalAgent and Tactical RMM RPC Service The MeshCentral system which is accessible from https://mesh.example.com and is used It runs 2 goroutines one is the checkrunner which runs all the checks and then just sleeps until it's time to run more checks 2nd goroutine periodically sends info about the agent to the rmm and also handles agent recovery Note In Task Manager you will see additional Tactical RMM Agent processes appear and disappear. These are your Checks and Tasks running at scheduled intervals Tactical RMM RPC Service Uses the pub/sub model so anytime you do anything realtime from rmm (like a send command or run script) It maintains a persistent connection to your to the api.example.com rmm server on port:4222 and is listening for events (using nats ) It handles your Agent updates (Auto triggers at 35mins past every hour or when run manually from server Agents | Update Agents menu)","title":"Services"},{"location":"howitallworks/#agent-installation-process","text":"Adds Defender AV exclusions Copies temp files to c:\\windows\\temp\\tacticalxxx folder. INNO setup installs app into %ProgramData%\\TacticalAgent\\ folder","title":"Agent Installation Process"},{"location":"howitallworks/#agent-update-process","text":"Downloads latest winagent-vx.x.x-x86/64.exe to %programfiles% Executes the file (INNO setup exe) Files create c:\\Windows\\temp\\Tacticalxxxx\\ folder for install (and log files)","title":"Agent Update Process"},{"location":"howitallworks/#windows-update-management","text":"Tactical RMM Agent sets: HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU AUOptions (REG_DWORD): 1: Keep my computer up to date is disabled in Automatic Updates. Uses this Microsoft API to handle updates: https://docs.microsoft.com/en-us/windows/win32/api/_wua/","title":"Windows Update Management"},{"location":"howitallworks/#log-files","text":"You can find 3 sets of detailed logs at /rmm/api/tacticalrmm/tacticalrmm/private/log error.log nginx log for all errors on all TRMM URL's: rmm, api and mesh access.log nginx log for access auditing on all URL's: rmm, api and mesh ( this is a large file, and should be cleaned periodically ) django_debug.log created by django webapp","title":"Log files"},{"location":"install_agent/","text":"Installing an agent \u00b6 Warning If you don't want to deal with AV flagging/deleting your agents, check the instructions for getting code signed agents You must add antivirus exlusions for the tactical agent. Any decent AV will flag the agent as a virus, since it technically is one due to the nature of this software. Adding the following exlucions will make sure everything works, including agent update: C:\\Program Files\\TacticalAgent\\* C:\\Program Files\\Mesh Agent\\* C:\\Windows\\Temp\\winagent-v*.exe C:\\Windows\\Temp\\trmm\\* C:\\temp\\tacticalrmm*.exe Dynamically generated executable \u00b6 The generated exe is simply a wrapper around the Manual install method, using a single exe/command without the need to pass any command line flags to the installer. All it does is download the generic installer from the agent's github release page and call it using predefined command line args that you choose from the web UI. It \"bakes\" the command line args into the executable. From the UI, click Agents > Install Agent You can also right click on a site > Install Agent . This will automatically fill in the client/site dropdown for you. Powershell \u00b6 The powershell method is very similar to the generated exe in that it simply downloads the installer from github and calls the exe for you. Manual \u00b6 The manual installation method requires you to first download the generic installer and call it using command line args. This is useful for scripting the installation using Group Policy or some other batch deployment method. Tip You can reuse the installer for any of the deployment methods, you don't need to constantly create a new installer for each new agent. The installer will be valid for however long you specify the token expiry time when generating an agent. Using a deployment link \u00b6 Creating a deployment link is the recommended way to deploy agents. The main benefit of this method is that the exectuable is generated only whenever the deployment download link is accessed, whereas with the other methods it's generated right away and the agent's version hardcoded into the exe. Using a deployment link will allow you to not worry about installing using an older version of an agent, which will fail to install if you have updated your RMM to a version that is not compatible with an older installer you might have lying around. To create a deployment, from the web UI click Agents > Manage Deployments . Tip Create a client/site named \"Default\" and create a deployment for it with a very long expiry to have a generic installer that can be deployed anytime at any client/site. You can then move the agent into the correct client/site from the web UI after it's been installed. Copy/paste the download link from the deployment into your browser. It will take a few seconds to dynamically generate the executable and then your browser will automatically download the exe. Optional installer args \u00b6 The following optional arguments can be passed to any of the installation method executables: -log debug Will print very verbose logging during agent install. Useful for troubleshooting agent install. -silent This will not popup any message boxes during install, either any error messages or the \"Installation was successfull\" message box that pops up at the end of a successfull install. -proxy \"http://proxyserver:port\" Use a http proxy -meshdir \"C:\\Program Files\\Your Company Name\\Mesh Agent\" Specify the full path to the directory containing MeshAgent.exe if using custom agent branding for your MeshCentral instance. -nomesh Do not install meshcentral agent during tactical agent install. Note: take control, remote terminal and file browser will not work.","title":"Agent Installation"},{"location":"install_agent/#installing-an-agent","text":"Warning If you don't want to deal with AV flagging/deleting your agents, check the instructions for getting code signed agents You must add antivirus exlusions for the tactical agent. Any decent AV will flag the agent as a virus, since it technically is one due to the nature of this software. Adding the following exlucions will make sure everything works, including agent update: C:\\Program Files\\TacticalAgent\\* C:\\Program Files\\Mesh Agent\\* C:\\Windows\\Temp\\winagent-v*.exe C:\\Windows\\Temp\\trmm\\* C:\\temp\\tacticalrmm*.exe","title":"Installing an agent"},{"location":"install_agent/#dynamically-generated-executable","text":"The generated exe is simply a wrapper around the Manual install method, using a single exe/command without the need to pass any command line flags to the installer. All it does is download the generic installer from the agent's github release page and call it using predefined command line args that you choose from the web UI. It \"bakes\" the command line args into the executable. From the UI, click Agents > Install Agent You can also right click on a site > Install Agent . This will automatically fill in the client/site dropdown for you.","title":"Dynamically generated executable"},{"location":"install_agent/#powershell","text":"The powershell method is very similar to the generated exe in that it simply downloads the installer from github and calls the exe for you.","title":"Powershell"},{"location":"install_agent/#manual","text":"The manual installation method requires you to first download the generic installer and call it using command line args. This is useful for scripting the installation using Group Policy or some other batch deployment method. Tip You can reuse the installer for any of the deployment methods, you don't need to constantly create a new installer for each new agent. The installer will be valid for however long you specify the token expiry time when generating an agent.","title":"Manual"},{"location":"install_agent/#using-a-deployment-link","text":"Creating a deployment link is the recommended way to deploy agents. The main benefit of this method is that the exectuable is generated only whenever the deployment download link is accessed, whereas with the other methods it's generated right away and the agent's version hardcoded into the exe. Using a deployment link will allow you to not worry about installing using an older version of an agent, which will fail to install if you have updated your RMM to a version that is not compatible with an older installer you might have lying around. To create a deployment, from the web UI click Agents > Manage Deployments . Tip Create a client/site named \"Default\" and create a deployment for it with a very long expiry to have a generic installer that can be deployed anytime at any client/site. You can then move the agent into the correct client/site from the web UI after it's been installed. Copy/paste the download link from the deployment into your browser. It will take a few seconds to dynamically generate the executable and then your browser will automatically download the exe.","title":"Using a deployment link"},{"location":"install_agent/#optional-installer-args","text":"The following optional arguments can be passed to any of the installation method executables: -log debug Will print very verbose logging during agent install. Useful for troubleshooting agent install. -silent This will not popup any message boxes during install, either any error messages or the \"Installation was successfull\" message box that pops up at the end of a successfull install. -proxy \"http://proxyserver:port\" Use a http proxy -meshdir \"C:\\Program Files\\Your Company Name\\Mesh Agent\" Specify the full path to the directory containing MeshAgent.exe if using custom agent branding for your MeshCentral instance. -nomesh Do not install meshcentral agent during tactical agent install. Note: take control, remote terminal and file browser will not work.","title":"Optional installer args"},{"location":"install_docker/","text":"Docker Setup \u00b6 Install docker and docker-compose Obtain valid wildcard certificate for your domain. If certificates are not provided, a self-signed certificate will be generated and most agent functions won't work. See below on how to generate a free Let's Encrypt! Generate certificates with certbot \u00b6 Install Certbot sudo apt-get install certbot Generate the wildcard certificate. Add the DNS entry for domain validation. Replace example.com with your root doamin sudo certbot certonly --manual -d *.example.com --agree-tos --no-bootstrap --manual-public-ip-logging-ok --preferred-challenges dns Configure DNS and firewall \u00b6 You will need to add DNS entries so that the three subdomains resolve to the IP of the docker host. There is a reverse proxy running that will route the hostnames to the correct container. On the host, you will need to ensure the firewall is open on tcp ports 80, 443 and 4222. Setting up the environment \u00b6 Get the docker-compose and .env.example file on the host you which to install on wget https://raw.githubusercontent.com/wh1te909/tacticalrmm/master/docker/docker-compose.yml wget https://raw.githubusercontent.com/wh1te909/tacticalrmm/master/docker/.env.example mv .env.example .env Change the values in .env to match your environment. If you are supplying certificates through Let's Encrypt or another source, see the section below about base64 encoding the certificate files. Base64 encoding certificates to pass as env variables \u00b6 Use the below command to add the the correct values to the .env. Running this command multiple times will add redundant entries, so those will need to be removed. Let's encrypt certs paths are below. Replace ${rootdomain} with your own. public key /etc/letsencrypt/live/${rootdomain}/fullchain.pem private key /etc/letsencrypt/live/${rootdomain}/privkey.pem echo \"CERT_PUB_KEY=$(sudo base64 -w 0 /path/to/pub/key)\" >> .env echo \"CERT_PRIV_KEY=$(sudo base64 -w 0 /path/to/priv/key)\" >> .env Starting the environment \u00b6 Run the below command to start the environment. sudo docker-compose up -d Removing the -d will start the containers in the foreground and is useful for debugging. Get MeshCentral EXE download link \u00b6 Run the below command to get the download link for the mesh central exe. This needs to be uploaded on first successful signin. sudo docker-compose exec tactical-backend python manage.py get_mesh_exe_url","title":"Docker Install"},{"location":"install_docker/#docker-setup","text":"Install docker and docker-compose Obtain valid wildcard certificate for your domain. If certificates are not provided, a self-signed certificate will be generated and most agent functions won't work. See below on how to generate a free Let's Encrypt!","title":"Docker Setup"},{"location":"install_docker/#generate-certificates-with-certbot","text":"Install Certbot sudo apt-get install certbot Generate the wildcard certificate. Add the DNS entry for domain validation. Replace example.com with your root doamin sudo certbot certonly --manual -d *.example.com --agree-tos --no-bootstrap --manual-public-ip-logging-ok --preferred-challenges dns","title":"Generate certificates with certbot"},{"location":"install_docker/#configure-dns-and-firewall","text":"You will need to add DNS entries so that the three subdomains resolve to the IP of the docker host. There is a reverse proxy running that will route the hostnames to the correct container. On the host, you will need to ensure the firewall is open on tcp ports 80, 443 and 4222.","title":"Configure DNS and firewall"},{"location":"install_docker/#setting-up-the-environment","text":"Get the docker-compose and .env.example file on the host you which to install on wget https://raw.githubusercontent.com/wh1te909/tacticalrmm/master/docker/docker-compose.yml wget https://raw.githubusercontent.com/wh1te909/tacticalrmm/master/docker/.env.example mv .env.example .env Change the values in .env to match your environment. If you are supplying certificates through Let's Encrypt or another source, see the section below about base64 encoding the certificate files.","title":"Setting up the environment"},{"location":"install_docker/#base64-encoding-certificates-to-pass-as-env-variables","text":"Use the below command to add the the correct values to the .env. Running this command multiple times will add redundant entries, so those will need to be removed. Let's encrypt certs paths are below. Replace ${rootdomain} with your own. public key /etc/letsencrypt/live/${rootdomain}/fullchain.pem private key /etc/letsencrypt/live/${rootdomain}/privkey.pem echo \"CERT_PUB_KEY=$(sudo base64 -w 0 /path/to/pub/key)\" >> .env echo \"CERT_PRIV_KEY=$(sudo base64 -w 0 /path/to/priv/key)\" >> .env","title":"Base64 encoding certificates to pass as env variables"},{"location":"install_docker/#starting-the-environment","text":"Run the below command to start the environment. sudo docker-compose up -d Removing the -d will start the containers in the foreground and is useful for debugging.","title":"Starting the environment"},{"location":"install_docker/#get-meshcentral-exe-download-link","text":"Run the below command to get the download link for the mesh central exe. This needs to be uploaded on first successful signin. sudo docker-compose exec tactical-backend python manage.py get_mesh_exe_url","title":"Get MeshCentral EXE download link"},{"location":"install_server/","text":"Installation \u00b6 Minimum requirements \u00b6 A fresh linux VM running either Ubuntu 20.04 or Debian 10, with a minimum of 3GB RAM (4GB Recommended). Warning The provided install script assumes a fresh server with no software installed on it. Attempting to run it on an existing server with other services will break things and the install will fail. The install script has been tested on the following public cloud providers: DigitalOcean, Linode, Vultr, BuyVM (highly recommended), Hetzner, AWS, Google Cloud and Azure, as well as behind NAT on Hyper-V, Proxmox and ESXi. A real (internet resolvable) domain is needed to generate a Let's Encrypt wildcard cert. If you cannot afford to purchase a domain ($12 a year) then you can get one for free at freenom.com example.local is NOT a real domain. No you don't have to expose your server to the internet A TOTP based authenticator app. Some popular ones are Google Authenticator, Authy and Microsoft Authenticator. Install \u00b6 Info It is recommended that you keep your server updated regularly (monthly). SSL wildcard certs will expire every 3 months and need manual updating as well. Until we reach production release, there may be architectural changes that may be made to Tactical RMM and only a regular patching schedule is supported by developers. Run updates and setup the linux user \u00b6 SSH into the server as root . Download and run the prereqs and latest updates apt update apt install -y wget curl sudo apt -y upgrade If a new kernel is installed, then reboot the server with the reboot command Create a linux user named tactical to run the rmm and add it to the sudoers group. For Ubuntu : adduser tactical usermod -a -G sudo tactical For Debian : useradd -m -s /bin/bash tactical usermod -a -G sudo tactical Tip Enable passwordless sudo to make your life easier Setup the firewall (optional but highly recommended) \u00b6 Info Skip this step if your VM is not publicly exposed to the world e.g. running behind NAT. You should setup the firewall rules in your router instead (ports 22, 443 and 4222 TCP). ufw default deny incoming ufw default allow outgoing ufw allow https ufw allow proto tcp from any to any port 4222 Info SSH (port 22 tcp) is only required for you to remotely login and do basic linux server administration for your rmm. It is not needed for any agent communication. Allow ssh from everywhere ( not recommended) ufw allow ssh Allow ssh from only allowed IP's ( highly recommended) ufw allow proto tcp from X.X.X.X to any port 22 ufw allow proto tcp from X.X.X.X to any port 22 Enable and activate the firewall ufw enable && ufw reload Create the A records \u00b6 We'll be using example.com as our domain for this example. Info The RMM uses 3 different sites. The Vue frontend e.g. rmm.example.com which is where you'll be accesing your RMM from the browser, the REST backend e.g. api.example.com and Meshcentral e.g. mesh.example.com Get the public IP of your server with curl https://icanhazip.tacticalrmm.io Open the DNS manager of wherever the domain you purchased is hosted. Create 3 A records: rmm , api and mesh and point them to the public IP of your server: Run the install script \u00b6 Switch to the tactical user su - tactical Download and run the install script wget https://raw.githubusercontent.com/wh1te909/tacticalrmm/master/install.sh chmod +x install.sh ./install.sh Answer the initial questions when prompted. Replace example.com with your domain. Deploy the TXT record in your DNS manager: \u00b6 Warning TXT records can take anywhere from 1 minute to a few hours to propogate depending on your DNS provider. You should verify the TXT record has been deployed first before pressing Enter. A quick way to check is with the following command: dig -t txt _acme-challenge.example.com Create a login for the RMM web UI: A bunch of URLS / usernames / passwords will be printed out at the end of the install script. Save these somewhere safe. Recover them if you didn't Copy the url for the meshagent exe ( https://mesh.example.com/agentinvite?c=...... ), paste it in your browser and download the mesh agent: Navigate to https://rmm.example.com and login with the username/password you created during install. Once logged in, you will be redirected to the initial setup page. Create your first client/site, choose the default timezone and then upload the mesh agent you just downloaded. Note Though it is an unsupported configuration, if you are using HAProxy or wish to configure fail2ban this might be of use to you Unsupported Configuration Notes","title":"Traditional Install"},{"location":"install_server/#installation","text":"","title":"Installation"},{"location":"install_server/#minimum-requirements","text":"A fresh linux VM running either Ubuntu 20.04 or Debian 10, with a minimum of 3GB RAM (4GB Recommended). Warning The provided install script assumes a fresh server with no software installed on it. Attempting to run it on an existing server with other services will break things and the install will fail. The install script has been tested on the following public cloud providers: DigitalOcean, Linode, Vultr, BuyVM (highly recommended), Hetzner, AWS, Google Cloud and Azure, as well as behind NAT on Hyper-V, Proxmox and ESXi. A real (internet resolvable) domain is needed to generate a Let's Encrypt wildcard cert. If you cannot afford to purchase a domain ($12 a year) then you can get one for free at freenom.com example.local is NOT a real domain. No you don't have to expose your server to the internet A TOTP based authenticator app. Some popular ones are Google Authenticator, Authy and Microsoft Authenticator.","title":"Minimum requirements"},{"location":"install_server/#install","text":"Info It is recommended that you keep your server updated regularly (monthly). SSL wildcard certs will expire every 3 months and need manual updating as well. Until we reach production release, there may be architectural changes that may be made to Tactical RMM and only a regular patching schedule is supported by developers.","title":"Install"},{"location":"install_server/#run-updates-and-setup-the-linux-user","text":"SSH into the server as root . Download and run the prereqs and latest updates apt update apt install -y wget curl sudo apt -y upgrade If a new kernel is installed, then reboot the server with the reboot command Create a linux user named tactical to run the rmm and add it to the sudoers group. For Ubuntu : adduser tactical usermod -a -G sudo tactical For Debian : useradd -m -s /bin/bash tactical usermod -a -G sudo tactical Tip Enable passwordless sudo to make your life easier","title":"Run updates and setup the linux user"},{"location":"install_server/#setup-the-firewall-optional-but-highly-recommended","text":"Info Skip this step if your VM is not publicly exposed to the world e.g. running behind NAT. You should setup the firewall rules in your router instead (ports 22, 443 and 4222 TCP). ufw default deny incoming ufw default allow outgoing ufw allow https ufw allow proto tcp from any to any port 4222 Info SSH (port 22 tcp) is only required for you to remotely login and do basic linux server administration for your rmm. It is not needed for any agent communication. Allow ssh from everywhere ( not recommended) ufw allow ssh Allow ssh from only allowed IP's ( highly recommended) ufw allow proto tcp from X.X.X.X to any port 22 ufw allow proto tcp from X.X.X.X to any port 22 Enable and activate the firewall ufw enable && ufw reload","title":"Setup the firewall (optional but highly recommended)"},{"location":"install_server/#create-the-a-records","text":"We'll be using example.com as our domain for this example. Info The RMM uses 3 different sites. The Vue frontend e.g. rmm.example.com which is where you'll be accesing your RMM from the browser, the REST backend e.g. api.example.com and Meshcentral e.g. mesh.example.com Get the public IP of your server with curl https://icanhazip.tacticalrmm.io Open the DNS manager of wherever the domain you purchased is hosted. Create 3 A records: rmm , api and mesh and point them to the public IP of your server:","title":"Create the A records"},{"location":"install_server/#run-the-install-script","text":"Switch to the tactical user su - tactical Download and run the install script wget https://raw.githubusercontent.com/wh1te909/tacticalrmm/master/install.sh chmod +x install.sh ./install.sh Answer the initial questions when prompted. Replace example.com with your domain.","title":"Run the install script"},{"location":"install_server/#deploy-the-txt-record-in-your-dns-manager","text":"Warning TXT records can take anywhere from 1 minute to a few hours to propogate depending on your DNS provider. You should verify the TXT record has been deployed first before pressing Enter. A quick way to check is with the following command: dig -t txt _acme-challenge.example.com Create a login for the RMM web UI: A bunch of URLS / usernames / passwords will be printed out at the end of the install script. Save these somewhere safe. Recover them if you didn't Copy the url for the meshagent exe ( https://mesh.example.com/agentinvite?c=...... ), paste it in your browser and download the mesh agent: Navigate to https://rmm.example.com and login with the username/password you created during install. Once logged in, you will be redirected to the initial setup page. Create your first client/site, choose the default timezone and then upload the mesh agent you just downloaded. Note Though it is an unsupported configuration, if you are using HAProxy or wish to configure fail2ban this might be of use to you Unsupported Configuration Notes","title":"Deploy the TXT record in your DNS manager:"},{"location":"license/","text":"MIT License Copyright (c) 2019-present wh1te909 Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"management_cmds/","text":"Management Commands \u00b6 To run any of the management commands you must first activate the python virtual env: cd /rmm/api/tacticalrmm source ../env/bin/activate Reset a user's password \u00b6 python manage.py reset_password <username> Reset a user's 2fa token \u00b6 python manage.py reset_2fa <username> Find all agents that have X software installed \u00b6 python manage.py find_software \"adobe\" Show outdated online agents \u00b6 python manage.py show_outdated_agents Log out all active web sessions \u00b6 python manage.py delete_tokens Check for orphaned tasks on all agents and remove them \u00b6 python manage.py remove_orphaned_tasks Create a MeshCentral agent invite link \u00b6 python manage.py get_mesh_exe_url Bulk update agent offline/overdue time \u00b6 Change offline time on all agents to 5 minutes python manage.py bulk_change_checkin --offline --all 5 Change offline time on all agents in site named Example Site to 2 minutes python manage.py bulk_change_checkin --offline --site \"Example Site\" 2 Change offline time on all agents in client named Example Client to 12 minutes python manage.py bulk_change_checkin --offline --client \"Example Client\" 12 Change overdue time on all agents to 10 minutes python manage.py bulk_change_checkin --overdue --all 10 Change overdue time on all agents in site named Example Site to 4 minutes python manage.py bulk_change_checkin --overdue --site \"Example Site\" 4 Change overdue time on all agents in client named Example Client to 14 minutes python manage.py bulk_change_checkin --overdue --client \"Example Client\" 14","title":"Management Commands"},{"location":"management_cmds/#management-commands","text":"To run any of the management commands you must first activate the python virtual env: cd /rmm/api/tacticalrmm source ../env/bin/activate","title":"Management Commands"},{"location":"management_cmds/#reset-a-users-password","text":"python manage.py reset_password <username>","title":"Reset a user's password"},{"location":"management_cmds/#reset-a-users-2fa-token","text":"python manage.py reset_2fa <username>","title":"Reset a user's 2fa token"},{"location":"management_cmds/#find-all-agents-that-have-x-software-installed","text":"python manage.py find_software \"adobe\"","title":"Find all agents that have X software installed"},{"location":"management_cmds/#show-outdated-online-agents","text":"python manage.py show_outdated_agents","title":"Show outdated online agents"},{"location":"management_cmds/#log-out-all-active-web-sessions","text":"python manage.py delete_tokens","title":"Log out all active web sessions"},{"location":"management_cmds/#check-for-orphaned-tasks-on-all-agents-and-remove-them","text":"python manage.py remove_orphaned_tasks","title":"Check for orphaned tasks on all agents and remove them"},{"location":"management_cmds/#create-a-meshcentral-agent-invite-link","text":"python manage.py get_mesh_exe_url","title":"Create a MeshCentral agent invite link"},{"location":"management_cmds/#bulk-update-agent-offlineoverdue-time","text":"Change offline time on all agents to 5 minutes python manage.py bulk_change_checkin --offline --all 5 Change offline time on all agents in site named Example Site to 2 minutes python manage.py bulk_change_checkin --offline --site \"Example Site\" 2 Change offline time on all agents in client named Example Client to 12 minutes python manage.py bulk_change_checkin --offline --client \"Example Client\" 12 Change overdue time on all agents to 10 minutes python manage.py bulk_change_checkin --overdue --all 10 Change overdue time on all agents in site named Example Site to 4 minutes python manage.py bulk_change_checkin --overdue --site \"Example Site\" 4 Change overdue time on all agents in client named Example Client to 14 minutes python manage.py bulk_change_checkin --overdue --client \"Example Client\" 14","title":"Bulk update agent offline/overdue time"},{"location":"mesh_integration/","text":"MeshCentral Integration \u00b6 Overview \u00b6 Tactical RMM integrates with MeshCentral for the following 3 functions: Take Control Real time shell Real time file browser At some point in the future, these functions will be directly built into the Tactical Agent, removing the need for MeshCentral. It should be noted that Tactical RMM and MeshCentral are 2 completely separate products and can run independently of each other. They do not even have to run on the same box, however when you install Tactical RMM it simply installs meshcentral for you with some preconfigured settings to allow integration. It is highly recommended to use the MeshCentral instance that Tactical installs, since it allows the developers more control over it and to ensure things don't break. How does it work \u00b6 MeshCentral has an embedding feature that allows integration into existing products. See Section 14 - Embedding MeshCentral in the MeshCentral User Guide for a detailed explanation of how this works. The Tactical RMM Agent keeps track of your Mesh Agents, and periodically interacts with them to synchronize the mesh agent's unique ID with the tactical rmm database. When you do a take control / terminal / file browser on an agent using the Tactical UI, behind the scenes, Tactical generates a login token for meshcentral's website and then \"wraps\" MeshCentral's UI in an iframe for that specific agent only, using it's unique ID to know what agent to render in the iframe.","title":"MeshCentral Integration"},{"location":"mesh_integration/#meshcentral-integration","text":"","title":"MeshCentral Integration"},{"location":"mesh_integration/#overview","text":"Tactical RMM integrates with MeshCentral for the following 3 functions: Take Control Real time shell Real time file browser At some point in the future, these functions will be directly built into the Tactical Agent, removing the need for MeshCentral. It should be noted that Tactical RMM and MeshCentral are 2 completely separate products and can run independently of each other. They do not even have to run on the same box, however when you install Tactical RMM it simply installs meshcentral for you with some preconfigured settings to allow integration. It is highly recommended to use the MeshCentral instance that Tactical installs, since it allows the developers more control over it and to ensure things don't break.","title":"Overview"},{"location":"mesh_integration/#how-does-it-work","text":"MeshCentral has an embedding feature that allows integration into existing products. See Section 14 - Embedding MeshCentral in the MeshCentral User Guide for a detailed explanation of how this works. The Tactical RMM Agent keeps track of your Mesh Agents, and periodically interacts with them to synchronize the mesh agent's unique ID with the tactical rmm database. When you do a take control / terminal / file browser on an agent using the Tactical UI, behind the scenes, Tactical generates a login token for meshcentral's website and then \"wraps\" MeshCentral's UI in an iframe for that specific agent only, using it's unique ID to know what agent to render in the iframe.","title":"How does it work"},{"location":"restore/","text":"Restore \u00b6 Info It is currently not possible to restore to a different domain/subdomain, only to a different physical or virtual server. Danger The restore script will always restore to the latest available RMM version on github. Make sure you update your old RMM to the latest version using the update.sh script and then run a fresh backup to use with this restore script. Prepare the new server \u00b6 Create the same exact linux user account as you did when you installed the original server. Add it to the sudoers group and setup the firewall. Refer to the installation instructions for steps on how to do all of the above. Change DNS A records \u00b6 Open the DNS manager of wherever your domain is hosted. Change the 3 A records rmm , api and mesh and point them to the public IP of your new server. Run the restore script \u00b6 Copy the backup tar file you created during backup to the new server. Download the restore script. wget https://raw.githubusercontent.com/wh1te909/tacticalrmm/master/restore.sh chmod +x restore.sh Call the restore script, passing it the backup file as the first argument: ./restore.sh rmm-backup-XXXXXXXXX.tar","title":"Restore"},{"location":"restore/#restore","text":"Info It is currently not possible to restore to a different domain/subdomain, only to a different physical or virtual server. Danger The restore script will always restore to the latest available RMM version on github. Make sure you update your old RMM to the latest version using the update.sh script and then run a fresh backup to use with this restore script.","title":"Restore"},{"location":"restore/#prepare-the-new-server","text":"Create the same exact linux user account as you did when you installed the original server. Add it to the sudoers group and setup the firewall. Refer to the installation instructions for steps on how to do all of the above.","title":"Prepare the new server"},{"location":"restore/#change-dns-a-records","text":"Open the DNS manager of wherever your domain is hosted. Change the 3 A records rmm , api and mesh and point them to the public IP of your new server.","title":"Change DNS A records"},{"location":"restore/#run-the-restore-script","text":"Copy the backup tar file you created during backup to the new server. Download the restore script. wget https://raw.githubusercontent.com/wh1te909/tacticalrmm/master/restore.sh chmod +x restore.sh Call the restore script, passing it the backup file as the first argument: ./restore.sh rmm-backup-XXXXXXXXX.tar","title":"Run the restore script"},{"location":"script_variables/","text":"Script Variables \u00b6 Tactical RMM allows passing dashboard data into script as arguments. This uses the syntax {{client.name}} . See below for the available options. Info Everything between {{}} is CaSe sEnSiTive Agent \u00b6 {{agent.version}} - Tactical RMM agent version {{agent.operating_system}} - Agent operating system example: Windows 10 Pro, 64 bit (build 19042.928) {{agent.plat}} - Will show the platform example: windows {{agent.plat_release}} - Will show the platform release {{agent.hostname}} - The hostname of the agent {{agent.local_ip}} - Local IP address of agent {{agent.public_ip}} - Public IP address of agent {{agent.agent_id}} - agent ID in database {{agent.last_seen}} - Date and Time Agent last seen {{agent.used_ram}} - Used RAM on agent. Returns an integer - example: 16 {{agent.total_ram}} - Total RAM on agent. Returns an integer - example: 16 {{agent.boot_time}} - Uptime of agent. Returns unix timestamp. example: 1619439603.0 {{agent.logged_in_username}} - Username of logged in user {{agent.last_logged_in_user}} - Username of last logged in user {{agent.monitoring_type}} - Returns a string of workstation or server {{agent.description}} - Description of agent in dashboard {{agent.mesh_node_id}} - The mesh node id used for linking the tactical agent to mesh. {{agent.overdue_email_alert}} - Returns true if overdue email alerts is enabled in TRMM {{agent.overdue_text_alert}} - Returns true if overdue SMS alerts is enabled in TRMM {{agent.overdue_dashboard_alert}} - Returns true if overdue agent alerts is enabled in TRMM {{agent.offline_time}} - Returns offline time setting for agent in TRMM {{agent.overdue_time}} - Returns overdue time setting for agent in TRMM {{agent.check_interval}} - Returns check interval time setting for agent in TRMM {{agent.needs_reboot}} - Returns true if reboot is pending on agent {{agent.choco_installed}} - Returns true if Chocolatey is installed {{agent.patches_last_installed}} - The date that patches were last installed by Tactical RMM. {{agent.needs_reboot}} - Returns true if the agent needs a reboot {{agent.time_zone}} - Returns timezone configured on agent {{agent.maintenance_mode}} - Returns true if agent is in maintenance mode {{agent.block_policy_inheritance}} - Returns true if agent has block policy inheritance {{agent.alert_template} - Returns true if agent has block policy inheritance Client \u00b6 {{client.name}} - Returns name of client Site \u00b6 {{site.name}} - Returns name of Site Alert \u00b6 Info Only available in failure and resolve actions on alert templates! {{alert.alert_time}} - Time of the alert {{alert.message}} - Alert message {{alert.severity}} - Severity of the alert info, warning, or error","title":"Script Variables"},{"location":"script_variables/#script-variables","text":"Tactical RMM allows passing dashboard data into script as arguments. This uses the syntax {{client.name}} . See below for the available options. Info Everything between {{}} is CaSe sEnSiTive","title":"Script Variables"},{"location":"script_variables/#agent","text":"{{agent.version}} - Tactical RMM agent version {{agent.operating_system}} - Agent operating system example: Windows 10 Pro, 64 bit (build 19042.928) {{agent.plat}} - Will show the platform example: windows {{agent.plat_release}} - Will show the platform release {{agent.hostname}} - The hostname of the agent {{agent.local_ip}} - Local IP address of agent {{agent.public_ip}} - Public IP address of agent {{agent.agent_id}} - agent ID in database {{agent.last_seen}} - Date and Time Agent last seen {{agent.used_ram}} - Used RAM on agent. Returns an integer - example: 16 {{agent.total_ram}} - Total RAM on agent. Returns an integer - example: 16 {{agent.boot_time}} - Uptime of agent. Returns unix timestamp. example: 1619439603.0 {{agent.logged_in_username}} - Username of logged in user {{agent.last_logged_in_user}} - Username of last logged in user {{agent.monitoring_type}} - Returns a string of workstation or server {{agent.description}} - Description of agent in dashboard {{agent.mesh_node_id}} - The mesh node id used for linking the tactical agent to mesh. {{agent.overdue_email_alert}} - Returns true if overdue email alerts is enabled in TRMM {{agent.overdue_text_alert}} - Returns true if overdue SMS alerts is enabled in TRMM {{agent.overdue_dashboard_alert}} - Returns true if overdue agent alerts is enabled in TRMM {{agent.offline_time}} - Returns offline time setting for agent in TRMM {{agent.overdue_time}} - Returns overdue time setting for agent in TRMM {{agent.check_interval}} - Returns check interval time setting for agent in TRMM {{agent.needs_reboot}} - Returns true if reboot is pending on agent {{agent.choco_installed}} - Returns true if Chocolatey is installed {{agent.patches_last_installed}} - The date that patches were last installed by Tactical RMM. {{agent.needs_reboot}} - Returns true if the agent needs a reboot {{agent.time_zone}} - Returns timezone configured on agent {{agent.maintenance_mode}} - Returns true if agent is in maintenance mode {{agent.block_policy_inheritance}} - Returns true if agent has block policy inheritance {{agent.alert_template} - Returns true if agent has block policy inheritance","title":"Agent"},{"location":"script_variables/#client","text":"{{client.name}} - Returns name of client","title":"Client"},{"location":"script_variables/#site","text":"{{site.name}} - Returns name of Site","title":"Site"},{"location":"script_variables/#alert","text":"Info Only available in failure and resolve actions on alert templates! {{alert.alert_time}} - Time of the alert {{alert.message}} - Alert message {{alert.severity}} - Severity of the alert info, warning, or error","title":"Alert"},{"location":"securing_nginx/","text":"DISCLAIMER \u00b6 All the settings covered in this document have been tested against Tactical RMM v0.7.2 and v0.8.0. Before applying these settings in production, use a pre-production environment so potential disruptions in your own environment and the service that you provide to your clients can be avoided. Warning Use the contents included in this guide and apply the security settings detailed here at your own discretion. Intro \u00b6 This section is structured in three main subsections: Enabling GeoIP in NGINX config with the purpose of filtering (blocking) web requests based on the country\u2019s source IP. Enabling anti \u201cbad\u201d bots/referrers in HTTP requests to the NGINX server. Compiling and enabling ModSec + OWASP CRS in NGINX server. Each section can be enabled independently. Hardening NGINX settings \u00b6 GeoIP Integration in NGINX - Blocking Requests by Country Code \u00b6 Install required packages and NGINX module for GeoIP: # apt-get install geoip-database libgeoip1 libnginx-mod-http-geoip Verify that the GeoIP database files have been placed in the right location: # ls -lrt /usr/share/GeoIP/ total 10004 -rw-r--r-- 1 root root 8138841 Jan 24 2020 GeoIPv6.dat -rw-r--r-- 1 root root 2099217 Jan 24 2020 GeoIP.dat Edit NGINX config file (\u201c/etc/nginx/nginx.conf\u201d) and add the following config under the \u201chttp {\u201c block: http { ## # Basic Settings ## # Load GeoIP Database geoip_country /usr/share/GeoIP/GeoIP.dat; The next settings will depend on the desired GeoIP blocking strategy. For \u201callow by default, deny by exception\u201d, the config would be: http { ## # Basic Settings ## # Load GeoIP Database geoip_country /usr/share/GeoIP/GeoIP.dat; # map the list of denied countries map $geoip_country_code $allowed_country { default yes; # BLOCKED_COUNTRY_1 COUNTRY_CODE_1 no; # BLOCKED_COUNTRY_2 COUNTRY_CODE_2 no; # BLOCKED_COUNTRY_3 COUNTRY_CODE_3 no; } (The macro can be modified to achieve the \u201cdeny by default, allow by exception\u201d approach). Finally, the following \u201cif\u201d statement needs to be placed in all the vhosts where the GeoIP blocking should take effect, under the \u201clocation\u201d section: location / { root /var/www/rmm/dist; try_files $uri $uri/ /index.html; add_header Cache-Control \"no-store, no-cache, must-revalidate\"; add_header Pragma \"no-cache\"; # block the country if ($allowed_country = no) { return 444; } } The HTTP Status = 444 is a good choice for NGINX not \u201cwasting\u201d too many resources in sending back the 4xx code to the client being blocked by GeoIP. Blocking \u201cbad bots\u201d and \u201cbad referrers\u201d \u00b6 Nginx Bad Bot and User-Agent Blocker, Spam Referrer Blocker, Anti DDOS, Bad IP Blocker and Wordpress Theme Detector Blocker Source: https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker Download \u201cinstall-ngxblocker\u201d to your /usr/local/sbin/directory and make the script executable. sudo wget https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/install-ngxblocker -O /usr/local/sbin/install-ngxblocker sudo chmod +x /usr/local/sbin/install-ngxblocker (OPTIONAL) Now run the \u201dinstall-ngxblocker\u201d script in DRY-MODE which will show you what changes it will make and what files it will download for you. This is only a DRY-RUN so no changes are being made yet. The install-ngxblocker downloads all required files including the setup and update scripts. cd /usr/local/sbin sudo ./install-ngxblocker This will show you output as follows of the changes that will be made (NOTE: this is only a DRY-RUN no changes have been made) Checking url: https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/include_filelist.txt ** Dry Run ** | not updating files | run as 'install-ngxblocker -x' to install files. Creating directory: /etc/nginx/bots.d REPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master Downloading [FROM]=> [REPO]/conf.d/globalblacklist.conf [TO]=> /etc/nginx/conf.d/globalblacklist.conf Downloading [FROM]=> [REPO]/conf.d/botblocker-nginx-settings.conf [TO]=> /etc/nginx/conf.d/botblocker-nginx-settings.conf REPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master Downloading [FROM]=> [REPO]/bots.d/blockbots.conf [TO]=> /etc/nginx/bots.d/blockbots.conf Downloading [FROM]=> [REPO]/bots.d/ddos.conf [TO]=> /etc/nginx/bots.d/ddos.conf Downloading [FROM]=> [REPO]/bots.d/whitelist-ips.conf [TO]=> /etc/nginx/bots.d/whitelist-ips.conf Downloading [FROM]=> [REPO]/bots.d/whitelist-domains.conf [TO]=> /etc/nginx/bots.d/whitelist-domains.conf Downloading [FROM]=> [REPO]/bots.d/blacklist-user-agents.conf [TO]=> /etc/nginx/bots.d/blacklist-user-agents.conf Downloading [FROM]=> [REPO]/bots.d/blacklist-ips.conf [TO]=> /etc/nginx/bots.d/blacklist-ips.conf Downloading [FROM]=> [REPO]/bots.d/bad-referrer-words.conf [TO]=> /etc/nginx/bots.d/bad-referrer-words.conf Downloading [FROM]=> [REPO]/bots.d/custom-bad-referrers.conf [TO]=> /etc/nginx/bots.d/custom-bad-referrers.conf REPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master Downloading [FROM]=> [REPO]/setup-ngxblocker [TO]=> /usr/local/sbin/setup-ngxblocker Downloading [FROM]=> [REPO]/update-ngxblocker [TO]=> /usr/local/sbin/update-ngxblocker Now run the install script with the -x parameter to download all the necessary files from the repository: cd /usr/local/sbin/ sudo ./install-ngxblocker -x This will give you the following output: Checking url: https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/include_filelist.txt Creating directory: /etc/nginx/bots.d REPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master Downloading [FROM]=> [REPO]/conf.d/globalblacklist.conf [TO]=> /etc/nginx/conf.d/globalblacklist.conf...OK Downloading [FROM]=> [REPO]/conf.d/botblocker-nginx-settings.conf [TO]=> /etc/nginx/conf.d/botblocker-nginx-settings.conf...OK REPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master Downloading [FROM]=> [REPO]/bots.d/blockbots.conf [TO]=> /etc/nginx/bots.d/blockbots.conf...OK Downloading [FROM]=> [REPO]/bots.d/ddos.conf [TO]=> /etc/nginx/bots.d/ddos.conf...OK Downloading [FROM]=> [REPO]/bots.d/whitelist-ips.conf [TO]=> /etc/nginx/bots.d/whitelist-ips.conf...OK Downloading [FROM]=> [REPO]/bots.d/whitelist-domains.conf [TO]=> /etc/nginx/bots.d/whitelist-domains.conf...OK Downloading [FROM]=> [REPO]/bots.d/blacklist-user-agents.conf [TO]=> /etc/nginx/bots.d/blacklist-user-agents.conf...OK Downloading [FROM]=> [REPO]/bots.d/blacklist-ips.conf [TO]=> /etc/nginx/bots.d/blacklist-ips.conf...OK Downloading [FROM]=> [REPO]/bots.d/bad-referrer-words.conf [TO]=> /etc/nginx/bots.d/bad-referrer-words.conf...OK Downloading [FROM]=> [REPO]/bots.d/custom-bad-referrers.conf [TO]=> /etc/nginx/bots.d/custom-bad-referrers.conf...OK REPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master Downloading [FROM]=> [REPO]/setup-ngxblocker [TO]=> /usr/local/sbin/setup-ngxblocker...OK Downloading [FROM]=> [REPO]/update-ngxblocker [TO]=> /usr/local/sbin/update-ngxblocker...OK All the required files have now been downloaded to the correct folders on Nginx for you direct from the repository. NOTE: The setup and update scripts can be used, however in this guide the config is done manually. For script execution, refer to the Github page linked above. Include any public IP addresses that should be whitelisted from bot and referrer analysis/blocking by editing the file \u201c/etc/nginx/bots.d/whitelist-ips.conf\u201d. Finally, edit every vhost file (\u201c/etc/nginx/sites-enabled/frontend.conf\u201d, \u201c/etc/nginx/sites-enabled/rmm.conf\u201d and \u201c/etc/nginx/sites-enabled/meshcentral.conf\u201d) and place the following include statements under the \u201cserver\u201d block: server { listen 443 ssl; include /etc/nginx/bots.d/ddos.conf; include /etc/nginx/bots.d/blockbots.conf; Enabling ModSec in NGINX \u00b6 All steps in this section taken from the NGINX blog post \u201cCompiling and Installing ModSecurity for NGINX Open Source\u201d: https://www.nginx.com/blog/compiling-and-installing-modsecurity-for-open-source-nginx/ Install Prerequisite Packages \u00b6 The first step is to install the packages required to complete the remaining steps in this tutorial. Run the following command, which is appropriate for a freshly installed Ubuntu/Debian system. The required packages might be different for RHEL/CentOS/Oracle Linux. apt-get install -y apt-utils autoconf automake build-essential git libcurl4-openssl-dev libgeoip-dev liblmdb-dev libpcre++-dev libtool libxml2-dev libyajl-dev pkgconf wget zlib1g-dev Download and Compile the ModSecurity 3.0 Source Code \u00b6 With the required prerequisite packages installed, the next step is to compile ModSecurity as an NGINX dynamic module. In ModSecurity 3.0\u2019s new modular architecture, libmodsecurity is the core component which includes all rules and functionality. The second main component in the architecture is a connector that links libmodsecurity to the web server it is running with. There are separate connectors for NGINX, Apache HTTP Server, and IIS. We cover the NGINX connector in the next section. To compile libmodsecurity: Clone the GitHub repository: git clone --depth 1 -b v3/master --single-branch https://github.com/SpiderLabs/ModSecurity Change to the ModSecurity directory and compile the source code: cd ModSecurity git submodule init git submodule update ./build.sh ./configure make make install cd .. The compilation takes about 15 minutes, depending on the processing power of your system. Note: It\u2019s safe to ignore messages like the following during the build process. Even when they appear, the compilation completes and creates a working object. fatal: No names found, cannot describe anything. Download the NGINX Connector for ModSecurity and Compile It as a Dynamic Module \u00b6 Compile the ModSecurity connector for NGINX as a dynamic module for NGINX. Clone the GitHub repository: git clone --depth 1 https://github.com/SpiderLabs/ModSecurity-nginx.git Determine which version of NGINX is running on the host where the ModSecurity module will be loaded: $ nginx -v nginx version: nginx/1.18.0 ( Ubuntu ) Download the source code corresponding to the installed version of NGINX (the complete sources are required even though only the dynamic module is being compiled): wget http://nginx.org/download/nginx-1.18.0.tar.gz tar zxvf nginx-1.18.0.tar.gz Compile the dynamic module and copy it to the standard directory for modules: cd nginx-1.18.0 ./configure --with-compat --add-dynamic-module = ../ModSecurity-nginx make modules cp objs/ngx_http_modsecurity_module.so /etc/nginx/modules cp objs/ngx_http_modsecurity_module.so /usr/share/nginx/modules/ cd .. Load the NGINX ModSecurity Connector Dynamic Module \u00b6 Add the following load_module directive to the main (top\u2011level) context in /etc/nginx/nginx.conf. It instructs NGINX to load the ModSecurity dynamic module when it processes the configuration: load_module modules/ngx_http_modsecurity_module.so; Configure and Enable ModSecurity \u00b6 The final step is to enable and test ModSecurity. Set up the appropriate ModSecurity configuration file. Here we\u2019re using the recommended ModSecurity configuration provided by TrustWave Spiderlabs, the corporate sponsors of ModSecurity. mkdir /etc/nginx/modsec wget -P /etc/nginx/modsec/ https://raw.githubusercontent.com/SpiderLabs/ModSecurity/v3/master/modsecurity.conf-recommended mv /etc/nginx/modsec/modsecurity.conf-recommended /etc/nginx/modsec/modsecurity.conf To guarantee that ModSecurity can find the unicode.mapping file (distributed in the top\u2011level ModSecurity directory of the GitHub repo), copy it to /etc/nginx/modsec. cp ModSecurity/unicode.mapping /etc/nginx/modsec Change the SecRuleEngine directive in the configuration to change from the default \u201cdetection only\u201d mode to actively dropping malicious traffic. #SecRuleEngine DetectionOnly SecRuleEngine On Enabling OWASP Core Rule Set \u00b6 Clone OWASP CRS: cd /etc/nginx/modsec git clone https://github.com/coreruleset/coreruleset.git Create CRS setup config file: cp /etc/nginx/modsec/coreruleset/crs-setup.conf.example /etc/nginx/modsec/coreruleset/crs-setup.conf Edit config file and enable a paranoia level of 2 (comment out section below and modify the paranoia level from 1 - default to 2): SecAction \\ \"id:900000,\\ phase:1,\\ nolog,\\ pass,\\ t:none,\\ setvar:tx.paranoia_level=2\" A Paranoia level of 2 is a good combination of security rules to load by the ModSec engine while keeping low the number of false positives. The OWASP CRS team carried out some tests using BURP against ModSec + OWASP CRS: Create ModSecurity base config file (\u201c/etc/nginx/modsec/modsec-base-cfg.conf\u201d) and include the following lines (the order is important) : Include /etc/nginx/modsec/modsecurity.conf Include /etc/nginx/modsec/coreruleset/crs-setup.conf Include /etc/nginx/modsec/coreruleset/rules/*.conf Enable ModSec in all NGINX enabled sites: \u201c/etc/nginx/sites-enabled/frontend.conf\u201d, \u201c/etc/nginx/sites-enabled/rmm.conf\u201d and \u201c/etc/nginx/sites-enabled/meshcentral.conf\u201d: server { modsecurity on; modsecurity_rules_file /etc/nginx/modsec/modsec-base-cfg.conf; \u2026\u2026\u2026\u2026\u2026\u2026\u2026.. \u2026\u2026\u2026\u2026\u2026\u2026\u2026.. Tactical RMM custom rules: Access to the admin UI (front-end): We apply the \u201cdeny by default, allow by exception\u201d principle, whereby only a set of predefined public IPs should be allowed to access the UI API and Meshcentral: RMM agents and RMM UI (as referrer while an admin session is active) make web calls that get blocked by the OWASP CRS, specifically PUT, POST and PATCH methods. These three methods can be \u201cwhitelisted\u201d when the requested URI matches legitimate requests. Connection to Meshcentral during Tactical agent install. Create a .conf file under \u201c/etc/nginx/modsec/coreruleset/rules\u201d named \u201cRMM-RULES.conf\u201d, for example, with the following content: #ADMIN UI/FRONTEND ACCESS - DENY BY DEFAULT, ALLOW BY EXCEPTION SecRule SERVER_NAME \"rmm.yourdomain.com\" \"id:1001,phase:1,nolog,msg:'Remote IP Not allowed',deny,chain\" ### ALLOWED PUBLIC IP 1 ######### SecRule REMOTE_ADDR \"!@eq IP1\" chain ### ALLOWED PUBLIC IP 2 ######### SecRule REMOTE_ADDR \"!@eq IP2\" \"t:none\" #API AND MESHCENTRAL - WHITELIST PUT, PATCH AND POST METHODS BY REQUESTED URI SecRule REQUEST_URI \"@beginsWith /api/v3/checkin\" \"id:1002,phase:1,t:none,nolog,allow,chain\" SecRule REQUEST_METHOD \"PUT|PATCH\" \"t:none\" SecRule REQUEST_URI \"@beginsWith /api/v3/checkrunner\" \"chain,id:'1003',phase:1,t:none,nolog,allow\" SecRule REQUEST_METHOD \"PATCH\" \"t:none\" SecRule REQUEST_URI \"@beginsWith /alerts/alerts\" \"chain,id:'1004',phase:1,t:none,nolog,allow\" SecRule REQUEST_METHOD \"PATCH\" \"t:none\" SecRule REQUEST_URI \"@beginsWith /agents/listagents\" \"chain,id:'1005',phase:1,t:none,nolog,allow\" SecRule REQUEST_METHOD \"PATCH\" \"t:none\" SecRule REQUEST_URI \"@beginsWith /api/v3/sysinfo\" \"chain,id:'1006',phase:1,t:none,nolog,allow\" SecRule REQUEST_METHOD \"PATCH\" \"t:none\" SecRule REQUEST_URI \"@beginsWith /api/v3/winupdates\" \"chain,id:'1007',phase:1,t:none,nolog,allow\" SecRule REQUEST_METHOD \"POST\" ##REQUIRED FOR MANAGEMENT ACTIONS FROM ADMIN/FRONT-END UI. WHITELIST BY REFERRER's URL SecRule REQUEST_HEADERS:REFERER \"https://rmm.yourdomain.com/\" \"id:1008,phase:1,nolog,ctl:ruleRemoveById=920170,allow\" #REQUIRED FOR NEW CLIENTS TO CONNECT TO MESH SERVICE WHILE INSTALLING THE AGENT SecRule REQUEST_URI \"@beginsWith /api/v3/meshexe\" \"id:1009,phase:1,nolog,ctl:ruleRemoveById=920170,allow\" ### NOTE ON RULE ID = 920170 (WHITELISTED IN CASES ABOVE FOR TACTICAL RMM) ### # Do not accept GET or HEAD requests with bodies # HTTP standard allows GET requests to have a body but this # feature is not used in real life. Attackers could try to force # a request body on an unsuspecting web applications. # # -=[ Rule Logic ]=- # This is a chained rule that first checks the Request Method. If it is a # GET or HEAD method, then it checks for the existence of a Content-Length # header. If the header exists and its payload is either not a 0 digit or not # empty, then it will match. # # -=[ References ]=- # http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.3 ###","title":"Securing nginx"},{"location":"securing_nginx/#disclaimer","text":"All the settings covered in this document have been tested against Tactical RMM v0.7.2 and v0.8.0. Before applying these settings in production, use a pre-production environment so potential disruptions in your own environment and the service that you provide to your clients can be avoided. Warning Use the contents included in this guide and apply the security settings detailed here at your own discretion.","title":"DISCLAIMER"},{"location":"securing_nginx/#intro","text":"This section is structured in three main subsections: Enabling GeoIP in NGINX config with the purpose of filtering (blocking) web requests based on the country\u2019s source IP. Enabling anti \u201cbad\u201d bots/referrers in HTTP requests to the NGINX server. Compiling and enabling ModSec + OWASP CRS in NGINX server. Each section can be enabled independently.","title":"Intro"},{"location":"securing_nginx/#hardening-nginx-settings","text":"","title":"Hardening NGINX settings"},{"location":"securing_nginx/#geoip-integration-in-nginx-blocking-requests-by-country-code","text":"Install required packages and NGINX module for GeoIP: # apt-get install geoip-database libgeoip1 libnginx-mod-http-geoip Verify that the GeoIP database files have been placed in the right location: # ls -lrt /usr/share/GeoIP/ total 10004 -rw-r--r-- 1 root root 8138841 Jan 24 2020 GeoIPv6.dat -rw-r--r-- 1 root root 2099217 Jan 24 2020 GeoIP.dat Edit NGINX config file (\u201c/etc/nginx/nginx.conf\u201d) and add the following config under the \u201chttp {\u201c block: http { ## # Basic Settings ## # Load GeoIP Database geoip_country /usr/share/GeoIP/GeoIP.dat; The next settings will depend on the desired GeoIP blocking strategy. For \u201callow by default, deny by exception\u201d, the config would be: http { ## # Basic Settings ## # Load GeoIP Database geoip_country /usr/share/GeoIP/GeoIP.dat; # map the list of denied countries map $geoip_country_code $allowed_country { default yes; # BLOCKED_COUNTRY_1 COUNTRY_CODE_1 no; # BLOCKED_COUNTRY_2 COUNTRY_CODE_2 no; # BLOCKED_COUNTRY_3 COUNTRY_CODE_3 no; } (The macro can be modified to achieve the \u201cdeny by default, allow by exception\u201d approach). Finally, the following \u201cif\u201d statement needs to be placed in all the vhosts where the GeoIP blocking should take effect, under the \u201clocation\u201d section: location / { root /var/www/rmm/dist; try_files $uri $uri/ /index.html; add_header Cache-Control \"no-store, no-cache, must-revalidate\"; add_header Pragma \"no-cache\"; # block the country if ($allowed_country = no) { return 444; } } The HTTP Status = 444 is a good choice for NGINX not \u201cwasting\u201d too many resources in sending back the 4xx code to the client being blocked by GeoIP.","title":"GeoIP Integration in NGINX - Blocking Requests by Country Code"},{"location":"securing_nginx/#blocking-bad-bots-and-bad-referrers","text":"Nginx Bad Bot and User-Agent Blocker, Spam Referrer Blocker, Anti DDOS, Bad IP Blocker and Wordpress Theme Detector Blocker Source: https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker Download \u201cinstall-ngxblocker\u201d to your /usr/local/sbin/directory and make the script executable. sudo wget https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/install-ngxblocker -O /usr/local/sbin/install-ngxblocker sudo chmod +x /usr/local/sbin/install-ngxblocker (OPTIONAL) Now run the \u201dinstall-ngxblocker\u201d script in DRY-MODE which will show you what changes it will make and what files it will download for you. This is only a DRY-RUN so no changes are being made yet. The install-ngxblocker downloads all required files including the setup and update scripts. cd /usr/local/sbin sudo ./install-ngxblocker This will show you output as follows of the changes that will be made (NOTE: this is only a DRY-RUN no changes have been made) Checking url: https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/include_filelist.txt ** Dry Run ** | not updating files | run as 'install-ngxblocker -x' to install files. Creating directory: /etc/nginx/bots.d REPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master Downloading [FROM]=> [REPO]/conf.d/globalblacklist.conf [TO]=> /etc/nginx/conf.d/globalblacklist.conf Downloading [FROM]=> [REPO]/conf.d/botblocker-nginx-settings.conf [TO]=> /etc/nginx/conf.d/botblocker-nginx-settings.conf REPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master Downloading [FROM]=> [REPO]/bots.d/blockbots.conf [TO]=> /etc/nginx/bots.d/blockbots.conf Downloading [FROM]=> [REPO]/bots.d/ddos.conf [TO]=> /etc/nginx/bots.d/ddos.conf Downloading [FROM]=> [REPO]/bots.d/whitelist-ips.conf [TO]=> /etc/nginx/bots.d/whitelist-ips.conf Downloading [FROM]=> [REPO]/bots.d/whitelist-domains.conf [TO]=> /etc/nginx/bots.d/whitelist-domains.conf Downloading [FROM]=> [REPO]/bots.d/blacklist-user-agents.conf [TO]=> /etc/nginx/bots.d/blacklist-user-agents.conf Downloading [FROM]=> [REPO]/bots.d/blacklist-ips.conf [TO]=> /etc/nginx/bots.d/blacklist-ips.conf Downloading [FROM]=> [REPO]/bots.d/bad-referrer-words.conf [TO]=> /etc/nginx/bots.d/bad-referrer-words.conf Downloading [FROM]=> [REPO]/bots.d/custom-bad-referrers.conf [TO]=> /etc/nginx/bots.d/custom-bad-referrers.conf REPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master Downloading [FROM]=> [REPO]/setup-ngxblocker [TO]=> /usr/local/sbin/setup-ngxblocker Downloading [FROM]=> [REPO]/update-ngxblocker [TO]=> /usr/local/sbin/update-ngxblocker Now run the install script with the -x parameter to download all the necessary files from the repository: cd /usr/local/sbin/ sudo ./install-ngxblocker -x This will give you the following output: Checking url: https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master/include_filelist.txt Creating directory: /etc/nginx/bots.d REPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master Downloading [FROM]=> [REPO]/conf.d/globalblacklist.conf [TO]=> /etc/nginx/conf.d/globalblacklist.conf...OK Downloading [FROM]=> [REPO]/conf.d/botblocker-nginx-settings.conf [TO]=> /etc/nginx/conf.d/botblocker-nginx-settings.conf...OK REPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master Downloading [FROM]=> [REPO]/bots.d/blockbots.conf [TO]=> /etc/nginx/bots.d/blockbots.conf...OK Downloading [FROM]=> [REPO]/bots.d/ddos.conf [TO]=> /etc/nginx/bots.d/ddos.conf...OK Downloading [FROM]=> [REPO]/bots.d/whitelist-ips.conf [TO]=> /etc/nginx/bots.d/whitelist-ips.conf...OK Downloading [FROM]=> [REPO]/bots.d/whitelist-domains.conf [TO]=> /etc/nginx/bots.d/whitelist-domains.conf...OK Downloading [FROM]=> [REPO]/bots.d/blacklist-user-agents.conf [TO]=> /etc/nginx/bots.d/blacklist-user-agents.conf...OK Downloading [FROM]=> [REPO]/bots.d/blacklist-ips.conf [TO]=> /etc/nginx/bots.d/blacklist-ips.conf...OK Downloading [FROM]=> [REPO]/bots.d/bad-referrer-words.conf [TO]=> /etc/nginx/bots.d/bad-referrer-words.conf...OK Downloading [FROM]=> [REPO]/bots.d/custom-bad-referrers.conf [TO]=> /etc/nginx/bots.d/custom-bad-referrers.conf...OK REPO = https://raw.githubusercontent.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/master Downloading [FROM]=> [REPO]/setup-ngxblocker [TO]=> /usr/local/sbin/setup-ngxblocker...OK Downloading [FROM]=> [REPO]/update-ngxblocker [TO]=> /usr/local/sbin/update-ngxblocker...OK All the required files have now been downloaded to the correct folders on Nginx for you direct from the repository. NOTE: The setup and update scripts can be used, however in this guide the config is done manually. For script execution, refer to the Github page linked above. Include any public IP addresses that should be whitelisted from bot and referrer analysis/blocking by editing the file \u201c/etc/nginx/bots.d/whitelist-ips.conf\u201d. Finally, edit every vhost file (\u201c/etc/nginx/sites-enabled/frontend.conf\u201d, \u201c/etc/nginx/sites-enabled/rmm.conf\u201d and \u201c/etc/nginx/sites-enabled/meshcentral.conf\u201d) and place the following include statements under the \u201cserver\u201d block: server { listen 443 ssl; include /etc/nginx/bots.d/ddos.conf; include /etc/nginx/bots.d/blockbots.conf;","title":"Blocking \u201cbad bots\u201d and \u201cbad referrers\u201d"},{"location":"securing_nginx/#enabling-modsec-in-nginx","text":"All steps in this section taken from the NGINX blog post \u201cCompiling and Installing ModSecurity for NGINX Open Source\u201d: https://www.nginx.com/blog/compiling-and-installing-modsecurity-for-open-source-nginx/","title":"Enabling ModSec in NGINX"},{"location":"securing_nginx/#install-prerequisite-packages","text":"The first step is to install the packages required to complete the remaining steps in this tutorial. Run the following command, which is appropriate for a freshly installed Ubuntu/Debian system. The required packages might be different for RHEL/CentOS/Oracle Linux. apt-get install -y apt-utils autoconf automake build-essential git libcurl4-openssl-dev libgeoip-dev liblmdb-dev libpcre++-dev libtool libxml2-dev libyajl-dev pkgconf wget zlib1g-dev","title":"Install Prerequisite Packages"},{"location":"securing_nginx/#download-and-compile-the-modsecurity-30-source-code","text":"With the required prerequisite packages installed, the next step is to compile ModSecurity as an NGINX dynamic module. In ModSecurity 3.0\u2019s new modular architecture, libmodsecurity is the core component which includes all rules and functionality. The second main component in the architecture is a connector that links libmodsecurity to the web server it is running with. There are separate connectors for NGINX, Apache HTTP Server, and IIS. We cover the NGINX connector in the next section. To compile libmodsecurity: Clone the GitHub repository: git clone --depth 1 -b v3/master --single-branch https://github.com/SpiderLabs/ModSecurity Change to the ModSecurity directory and compile the source code: cd ModSecurity git submodule init git submodule update ./build.sh ./configure make make install cd .. The compilation takes about 15 minutes, depending on the processing power of your system. Note: It\u2019s safe to ignore messages like the following during the build process. Even when they appear, the compilation completes and creates a working object. fatal: No names found, cannot describe anything.","title":"Download and Compile the ModSecurity 3.0 Source Code"},{"location":"securing_nginx/#download-the-nginx-connector-for-modsecurity-and-compile-it-as-a-dynamic-module","text":"Compile the ModSecurity connector for NGINX as a dynamic module for NGINX. Clone the GitHub repository: git clone --depth 1 https://github.com/SpiderLabs/ModSecurity-nginx.git Determine which version of NGINX is running on the host where the ModSecurity module will be loaded: $ nginx -v nginx version: nginx/1.18.0 ( Ubuntu ) Download the source code corresponding to the installed version of NGINX (the complete sources are required even though only the dynamic module is being compiled): wget http://nginx.org/download/nginx-1.18.0.tar.gz tar zxvf nginx-1.18.0.tar.gz Compile the dynamic module and copy it to the standard directory for modules: cd nginx-1.18.0 ./configure --with-compat --add-dynamic-module = ../ModSecurity-nginx make modules cp objs/ngx_http_modsecurity_module.so /etc/nginx/modules cp objs/ngx_http_modsecurity_module.so /usr/share/nginx/modules/ cd ..","title":"Download the NGINX Connector for ModSecurity and Compile It as a Dynamic Module"},{"location":"securing_nginx/#load-the-nginx-modsecurity-connector-dynamic-module","text":"Add the following load_module directive to the main (top\u2011level) context in /etc/nginx/nginx.conf. It instructs NGINX to load the ModSecurity dynamic module when it processes the configuration: load_module modules/ngx_http_modsecurity_module.so;","title":"Load the NGINX ModSecurity Connector Dynamic Module"},{"location":"securing_nginx/#configure-and-enable-modsecurity","text":"The final step is to enable and test ModSecurity. Set up the appropriate ModSecurity configuration file. Here we\u2019re using the recommended ModSecurity configuration provided by TrustWave Spiderlabs, the corporate sponsors of ModSecurity. mkdir /etc/nginx/modsec wget -P /etc/nginx/modsec/ https://raw.githubusercontent.com/SpiderLabs/ModSecurity/v3/master/modsecurity.conf-recommended mv /etc/nginx/modsec/modsecurity.conf-recommended /etc/nginx/modsec/modsecurity.conf To guarantee that ModSecurity can find the unicode.mapping file (distributed in the top\u2011level ModSecurity directory of the GitHub repo), copy it to /etc/nginx/modsec. cp ModSecurity/unicode.mapping /etc/nginx/modsec Change the SecRuleEngine directive in the configuration to change from the default \u201cdetection only\u201d mode to actively dropping malicious traffic. #SecRuleEngine DetectionOnly SecRuleEngine On","title":"Configure and Enable ModSecurity"},{"location":"securing_nginx/#enabling-owasp-core-rule-set","text":"Clone OWASP CRS: cd /etc/nginx/modsec git clone https://github.com/coreruleset/coreruleset.git Create CRS setup config file: cp /etc/nginx/modsec/coreruleset/crs-setup.conf.example /etc/nginx/modsec/coreruleset/crs-setup.conf Edit config file and enable a paranoia level of 2 (comment out section below and modify the paranoia level from 1 - default to 2): SecAction \\ \"id:900000,\\ phase:1,\\ nolog,\\ pass,\\ t:none,\\ setvar:tx.paranoia_level=2\" A Paranoia level of 2 is a good combination of security rules to load by the ModSec engine while keeping low the number of false positives. The OWASP CRS team carried out some tests using BURP against ModSec + OWASP CRS: Create ModSecurity base config file (\u201c/etc/nginx/modsec/modsec-base-cfg.conf\u201d) and include the following lines (the order is important) : Include /etc/nginx/modsec/modsecurity.conf Include /etc/nginx/modsec/coreruleset/crs-setup.conf Include /etc/nginx/modsec/coreruleset/rules/*.conf Enable ModSec in all NGINX enabled sites: \u201c/etc/nginx/sites-enabled/frontend.conf\u201d, \u201c/etc/nginx/sites-enabled/rmm.conf\u201d and \u201c/etc/nginx/sites-enabled/meshcentral.conf\u201d: server { modsecurity on; modsecurity_rules_file /etc/nginx/modsec/modsec-base-cfg.conf; \u2026\u2026\u2026\u2026\u2026\u2026\u2026.. \u2026\u2026\u2026\u2026\u2026\u2026\u2026.. Tactical RMM custom rules: Access to the admin UI (front-end): We apply the \u201cdeny by default, allow by exception\u201d principle, whereby only a set of predefined public IPs should be allowed to access the UI API and Meshcentral: RMM agents and RMM UI (as referrer while an admin session is active) make web calls that get blocked by the OWASP CRS, specifically PUT, POST and PATCH methods. These three methods can be \u201cwhitelisted\u201d when the requested URI matches legitimate requests. Connection to Meshcentral during Tactical agent install. Create a .conf file under \u201c/etc/nginx/modsec/coreruleset/rules\u201d named \u201cRMM-RULES.conf\u201d, for example, with the following content: #ADMIN UI/FRONTEND ACCESS - DENY BY DEFAULT, ALLOW BY EXCEPTION SecRule SERVER_NAME \"rmm.yourdomain.com\" \"id:1001,phase:1,nolog,msg:'Remote IP Not allowed',deny,chain\" ### ALLOWED PUBLIC IP 1 ######### SecRule REMOTE_ADDR \"!@eq IP1\" chain ### ALLOWED PUBLIC IP 2 ######### SecRule REMOTE_ADDR \"!@eq IP2\" \"t:none\" #API AND MESHCENTRAL - WHITELIST PUT, PATCH AND POST METHODS BY REQUESTED URI SecRule REQUEST_URI \"@beginsWith /api/v3/checkin\" \"id:1002,phase:1,t:none,nolog,allow,chain\" SecRule REQUEST_METHOD \"PUT|PATCH\" \"t:none\" SecRule REQUEST_URI \"@beginsWith /api/v3/checkrunner\" \"chain,id:'1003',phase:1,t:none,nolog,allow\" SecRule REQUEST_METHOD \"PATCH\" \"t:none\" SecRule REQUEST_URI \"@beginsWith /alerts/alerts\" \"chain,id:'1004',phase:1,t:none,nolog,allow\" SecRule REQUEST_METHOD \"PATCH\" \"t:none\" SecRule REQUEST_URI \"@beginsWith /agents/listagents\" \"chain,id:'1005',phase:1,t:none,nolog,allow\" SecRule REQUEST_METHOD \"PATCH\" \"t:none\" SecRule REQUEST_URI \"@beginsWith /api/v3/sysinfo\" \"chain,id:'1006',phase:1,t:none,nolog,allow\" SecRule REQUEST_METHOD \"PATCH\" \"t:none\" SecRule REQUEST_URI \"@beginsWith /api/v3/winupdates\" \"chain,id:'1007',phase:1,t:none,nolog,allow\" SecRule REQUEST_METHOD \"POST\" ##REQUIRED FOR MANAGEMENT ACTIONS FROM ADMIN/FRONT-END UI. WHITELIST BY REFERRER's URL SecRule REQUEST_HEADERS:REFERER \"https://rmm.yourdomain.com/\" \"id:1008,phase:1,nolog,ctl:ruleRemoveById=920170,allow\" #REQUIRED FOR NEW CLIENTS TO CONNECT TO MESH SERVICE WHILE INSTALLING THE AGENT SecRule REQUEST_URI \"@beginsWith /api/v3/meshexe\" \"id:1009,phase:1,nolog,ctl:ruleRemoveById=920170,allow\" ### NOTE ON RULE ID = 920170 (WHITELISTED IN CASES ABOVE FOR TACTICAL RMM) ### # Do not accept GET or HEAD requests with bodies # HTTP standard allows GET requests to have a body but this # feature is not used in real life. Attackers could try to force # a request body on an unsuspecting web applications. # # -=[ Rule Logic ]=- # This is a chained rule that first checks the Request Method. If it is a # GET or HEAD method, then it checks for the existence of a Content-Length # header. If the header exists and its payload is either not a 0 digit or not # empty, then it will match. # # -=[ References ]=- # http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.3 ###","title":"Enabling OWASP Core Rule Set"},{"location":"sponsor/","text":"Sponsor Tactical RMM \u00b6 Tactical RMM is an MIT-licensed open-source project maintained by @wh1te909 , @sadnub and a community of open source contributors. We work on behalf of the community to create new features, fix bugs, and maintain Tactical RMM. Tactical RMM is currently the only open-source RMM available on the market. Responses from a recent survey have rated Tactical RMM as having the fastest and most reliable remote command and script execution compared to all other commercial RMM's. Sponsorships help keep this project alive and motivate the developers to continue to put in more time and effort into the advancement of Tactical RMM. Thousands of hours have been put in to developing, maintaining, improving, and supporting Tactical RMM. Your sponsorship would be greatly appreciated and helpful to keep this project going. Funds donated will be used to setup a company to purchase a code signing certificate to sign all executables that are used by the RMM, costs needed to maintain demo and documentation sites, to support development of new features and the Linux and Mac agents. If you have signed up to be a sponsor and have not been added to the Sponsors role on discord after a few hours, or if your github username is different than your discord username, please DM wh1te909 on Discord after sponsoring to be added to the Sponsors role. We are always looking for feedback and ways to improve Tactical RMM to better address your needs. Please feel free to open a github issue or drop us a message on Discord with your feedback or requests. Sponsor with Github Sponsor with Ko-fi","title":"Sponsor"},{"location":"sponsor/#sponsor-tactical-rmm","text":"Tactical RMM is an MIT-licensed open-source project maintained by @wh1te909 , @sadnub and a community of open source contributors. We work on behalf of the community to create new features, fix bugs, and maintain Tactical RMM. Tactical RMM is currently the only open-source RMM available on the market. Responses from a recent survey have rated Tactical RMM as having the fastest and most reliable remote command and script execution compared to all other commercial RMM's. Sponsorships help keep this project alive and motivate the developers to continue to put in more time and effort into the advancement of Tactical RMM. Thousands of hours have been put in to developing, maintaining, improving, and supporting Tactical RMM. Your sponsorship would be greatly appreciated and helpful to keep this project going. Funds donated will be used to setup a company to purchase a code signing certificate to sign all executables that are used by the RMM, costs needed to maintain demo and documentation sites, to support development of new features and the Linux and Mac agents. If you have signed up to be a sponsor and have not been added to the Sponsors role on discord after a few hours, or if your github username is different than your discord username, please DM wh1te909 on Discord after sponsoring to be added to the Sponsors role. We are always looking for feedback and ways to improve Tactical RMM to better address your needs. Please feel free to open a github issue or drop us a message on Discord with your feedback or requests. Sponsor with Github Sponsor with Ko-fi","title":"Sponsor Tactical RMM"},{"location":"tipsntricks/","text":"Tips and Tricks \u00b6 Customize User Interface \u00b6 At the top right of your web administration interface, click your Username > preferences. Set default tab: Servers|Workstations|Mixed Mesh \u00b6 Right-click the connect button in Remote Background | Terminal for shell options Right-click the connect button in Take Control for connect options","title":"Tips n' Tricks"},{"location":"tipsntricks/#tips-and-tricks","text":"","title":"Tips and Tricks"},{"location":"tipsntricks/#customize-user-interface","text":"At the top right of your web administration interface, click your Username > preferences. Set default tab: Servers|Workstations|Mixed","title":"Customize User Interface"},{"location":"tipsntricks/#mesh","text":"Right-click the connect button in Remote Background | Terminal for shell options Right-click the connect button in Take Control for connect options","title":"Mesh"},{"location":"troubleshooting/","text":"Troubleshooting \u00b6 Problems after new install \u00b6 In the very unlikely event you have issues after install please wipe the box and install again (following all the steps including downloading the install script but not running it) use the following command which will log the install progress and if you continue to have issues will assist with support of the installation. bash -x install.sh 2 > & 1 | tee install.log Note Logging of installs isn\u2019t desirable as it logs extremely sensitive information which is why this isn\u2019t done by default! Do not post the raw log publicly only provide it if requested and then by dm only. Authorized users in Discord are: @BurningTimes#1938 @sadnub#6992 @dinger1986#1734 @silversword#9652 \"Bad credentials\" error when trying to login to the Web UI \u00b6 If you are sure you are using the correct credentials and still getting a \"bad credentials\" error, open your browser's dev tools (ctrl + shift + j on chrome) and check the Console tab to see the real error. It will most probably be a CORS error which means you need to check your DNS settings and make sure whatever computer you're trying to access the UI from resolves your 3 subdomains to the correct IP of the server running the RMM (public IP if running in the cloud, or private IP if running behind NAT). If you see an error about SSL or certificate expired, then your Let's Encrypt cert has probably expired and you'll need to renew it. Refer to the Let's Encrypt cert renewal instructions here Agents not updating \u00b6 The most common problem we've seen of agents not updating is due to Antivirus blocking the updater executable. Windows Defender will 100% of the time block the updater from running unless an exclusion is set. Refer to the Agent Installation instructions for AV exceptions to set and manually doing an agent update with logging to troubleshoot further. Agents will also not automatically update if they are too old. Since Tactical RMM is still in alpha and the developers makes breaking changes pretty frequently, there is no promise of backwards compatibility. If you have agents that are relatively old, you will need to uninstall them manually and reinstall using the latest version. Agents not checking in or showing up / General agent issues \u00b6 First, reload NATS from tactical's web UI: Tools > Server Maintenance > Reload Nats Configuration Open CMD as admin on the problem computer and stop the agent services: net stop tacticalagent net stop tacticalrpc Run the tacticalagent service manually with debug logging: \"C:\\Program Files\\TacticalAgent\\tacticalrmm.exe\" -m winagentsvc -log debug -logto stdout Run the tacticalrpc service manually with debug logging: \"C:\\Program Files\\TacticalAgent\\tacticalrmm.exe\" -m rpc -log debug -logto stdout This will print out a ton of info. You should be able to see the error from the debug log output. Please then copy/paste the logs and post them either in our Discord support chat , or create a github issue . If all else fails, simply uninstall the agent either from control panel or silently with \"C:\\Program Files\\TacticalAgent\\unins000.exe\" /VERYSILENT and then reinstall the agent. All other errors \u00b6 First, run the update script with the --force flag. This will fix permissions and reinstall python/node packages that might have gotten corrupted. ./update.sh --force Check the debug log from the web UI: File > Debug Log Open your browser's dev tools (ctrl + shift + j on chrome) and check the Console tab for any errors Check all the systemd services that the rmm uses to function and check to make sure they're all active/running and enabled: sudo systemctl status rmm sudo systemctl status daphne sudo systemctl status celery sudo systemctl status celerybeat sudo systemctl status nginx sudo systemctl status nats sudo systemctl status meshcentral sudo systemctl status mongod sudo systemctl status postgresql sudo systemctl status redis Read through the log files in the following folders and check for errors: /rmm/api/tacticalrmm/tacticalrmm/private/log /var/log/celery Using Cloudflare DNS \u00b6 rmm.example.com can be proxied. api.example.com can NOT be proxied. mesh.example.com can be proxied with the caveat that Mesh checks the cert presented to the agent is the same one on the server. I.e. no MITM. You'll need to copy Cloudflare's edge cert to your server if you want to proxy this domain. Testing Network Connectivity between agent and server \u00b6 Use powershell, make sure you can connect to 443 and 4222 from agent to server: Test-NetConnection -ComputerName api . example . com -Port 4222 Test-NetConnection -ComputerName api . example . com -Port 443 Test-NetConnection -ComputerName rmm . example . com -Port 443 Are you trying to use a proxy to share your single public IP with multiple services on 443? This is complicated and unsupported by Tactical RMM , test your setup.","title":"Troubleshooting"},{"location":"troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"troubleshooting/#problems-after-new-install","text":"In the very unlikely event you have issues after install please wipe the box and install again (following all the steps including downloading the install script but not running it) use the following command which will log the install progress and if you continue to have issues will assist with support of the installation. bash -x install.sh 2 > & 1 | tee install.log Note Logging of installs isn\u2019t desirable as it logs extremely sensitive information which is why this isn\u2019t done by default! Do not post the raw log publicly only provide it if requested and then by dm only. Authorized users in Discord are: @BurningTimes#1938 @sadnub#6992 @dinger1986#1734 @silversword#9652","title":"Problems after new install"},{"location":"troubleshooting/#bad-credentials-error-when-trying-to-login-to-the-web-ui","text":"If you are sure you are using the correct credentials and still getting a \"bad credentials\" error, open your browser's dev tools (ctrl + shift + j on chrome) and check the Console tab to see the real error. It will most probably be a CORS error which means you need to check your DNS settings and make sure whatever computer you're trying to access the UI from resolves your 3 subdomains to the correct IP of the server running the RMM (public IP if running in the cloud, or private IP if running behind NAT). If you see an error about SSL or certificate expired, then your Let's Encrypt cert has probably expired and you'll need to renew it. Refer to the Let's Encrypt cert renewal instructions here","title":"\"Bad credentials\" error when trying to login to the Web UI"},{"location":"troubleshooting/#agents-not-updating","text":"The most common problem we've seen of agents not updating is due to Antivirus blocking the updater executable. Windows Defender will 100% of the time block the updater from running unless an exclusion is set. Refer to the Agent Installation instructions for AV exceptions to set and manually doing an agent update with logging to troubleshoot further. Agents will also not automatically update if they are too old. Since Tactical RMM is still in alpha and the developers makes breaking changes pretty frequently, there is no promise of backwards compatibility. If you have agents that are relatively old, you will need to uninstall them manually and reinstall using the latest version.","title":"Agents not updating"},{"location":"troubleshooting/#agents-not-checking-in-or-showing-up-general-agent-issues","text":"First, reload NATS from tactical's web UI: Tools > Server Maintenance > Reload Nats Configuration Open CMD as admin on the problem computer and stop the agent services: net stop tacticalagent net stop tacticalrpc Run the tacticalagent service manually with debug logging: \"C:\\Program Files\\TacticalAgent\\tacticalrmm.exe\" -m winagentsvc -log debug -logto stdout Run the tacticalrpc service manually with debug logging: \"C:\\Program Files\\TacticalAgent\\tacticalrmm.exe\" -m rpc -log debug -logto stdout This will print out a ton of info. You should be able to see the error from the debug log output. Please then copy/paste the logs and post them either in our Discord support chat , or create a github issue . If all else fails, simply uninstall the agent either from control panel or silently with \"C:\\Program Files\\TacticalAgent\\unins000.exe\" /VERYSILENT and then reinstall the agent.","title":"Agents not checking in or showing up / General agent issues"},{"location":"troubleshooting/#all-other-errors","text":"First, run the update script with the --force flag. This will fix permissions and reinstall python/node packages that might have gotten corrupted. ./update.sh --force Check the debug log from the web UI: File > Debug Log Open your browser's dev tools (ctrl + shift + j on chrome) and check the Console tab for any errors Check all the systemd services that the rmm uses to function and check to make sure they're all active/running and enabled: sudo systemctl status rmm sudo systemctl status daphne sudo systemctl status celery sudo systemctl status celerybeat sudo systemctl status nginx sudo systemctl status nats sudo systemctl status meshcentral sudo systemctl status mongod sudo systemctl status postgresql sudo systemctl status redis Read through the log files in the following folders and check for errors: /rmm/api/tacticalrmm/tacticalrmm/private/log /var/log/celery","title":"All other errors"},{"location":"troubleshooting/#using-cloudflare-dns","text":"rmm.example.com can be proxied. api.example.com can NOT be proxied. mesh.example.com can be proxied with the caveat that Mesh checks the cert presented to the agent is the same one on the server. I.e. no MITM. You'll need to copy Cloudflare's edge cert to your server if you want to proxy this domain.","title":"Using Cloudflare DNS"},{"location":"troubleshooting/#testing-network-connectivity-between-agent-and-server","text":"Use powershell, make sure you can connect to 443 and 4222 from agent to server: Test-NetConnection -ComputerName api . example . com -Port 4222 Test-NetConnection -ComputerName api . example . com -Port 443 Test-NetConnection -ComputerName rmm . example . com -Port 443 Are you trying to use a proxy to share your single public IP with multiple services on 443? This is complicated and unsupported by Tactical RMM , test your setup.","title":"Testing Network Connectivity between agent and server"},{"location":"unsupported_guidelines/","text":"General Information \u00b6 Tactical RMM is designed to be secure by default. You CAN expose it to the internet, and start deploying agents. You CAN not expose it to the internet, and start deploying agents. Period \u00b6 Info BIG PERIOD . <--- See, it's really really big \ud83d\ude42 That said... \u00b6 There are those that wish to add layers to their security onion. For the benefit of others following in their footsteps, we have added here for your convenience additional information on a range of subjects and technologies that have been graciously donated to us by the community at large. Please be aware that those providing help and assistance in the Discord #support channel will generally assume that you are not one of these wizards of networking magic. Should you employ any one or several of these unsupported technologies: Proxies Firewalls GeoIP filters fail2ban filters alternate methods of SSL cert management IDSs IPSs SDNs and any/all other magical ABC thru XYZ technologies Please let us know BEFORE we start troubleshooting and looking for software bugs that you are...in fact...a \ud83e\uddd9...and using something non-standard \ud83d\ude09 Help us maximize keeping developer time and resources focused on new releases...not support goosechases. Thank you and #KeepDeploying","title":"Unsupported Guidelines"},{"location":"unsupported_guidelines/#general-information","text":"Tactical RMM is designed to be secure by default. You CAN expose it to the internet, and start deploying agents. You CAN not expose it to the internet, and start deploying agents.","title":"General Information"},{"location":"unsupported_guidelines/#period","text":"Info BIG PERIOD . <--- See, it's really really big \ud83d\ude42","title":"Period"},{"location":"unsupported_guidelines/#that-said","text":"There are those that wish to add layers to their security onion. For the benefit of others following in their footsteps, we have added here for your convenience additional information on a range of subjects and technologies that have been graciously donated to us by the community at large. Please be aware that those providing help and assistance in the Discord #support channel will generally assume that you are not one of these wizards of networking magic. Should you employ any one or several of these unsupported technologies: Proxies Firewalls GeoIP filters fail2ban filters alternate methods of SSL cert management IDSs IPSs SDNs and any/all other magical ABC thru XYZ technologies Please let us know BEFORE we start troubleshooting and looking for software bugs that you are...in fact...a \ud83e\uddd9...and using something non-standard \ud83d\ude09 Help us maximize keeping developer time and resources focused on new releases...not support goosechases. Thank you and #KeepDeploying","title":"That said..."},{"location":"unsupported_scripts/","text":"Unsupported Reference Scripts \u00b6 Note These are not supported scripts/configurations by Tactical RMM, but it's provided here for your reference. HAProxy \u00b6 Check/Change the mesh central config.json, some of the values may be set already, CertUrl must be changed to point to the HAProxy server. Meshcentral Adjustment \u00b6 Credit to @bradhawkins Edit Meshcentral config nano /meshcentral/meshcentral-data/config.json Insert this (modify HAProxyIP to your network) { \"settings\": { \"Port\": 4430, \"AliasPort\": 443, \"RedirPort\": 800, \"TlsOffload\": \"127.0.0.1\", }, \"domains\": { \"\": { \"CertUrl\": \"https://HAProxyIP:443/\", } } } Restart meshcentral service meshcentral restart HAProxy Config \u00b6 The order of use_backend is important Tactical-Mesh-WebSocket_ipvANY must be before Tactical-Mesh_ipvANY The values of timeout connect , timeout server , timeout tunnel in Tactical-Mesh-WebSocket have been configured to maintain a stable agent connection, however you may need to adjust these values to suit your environment. frontend HTTPS-merged bind 0.0.0.0:443 name 0.0.0.0:443 ssl crt-list /var/etc/haproxy/HTTPS.crt_list #ADJUST THIS TO YOUR OWN SSL CERTIFICATES mode http log global option socket-stats option dontlognull option http-server-close option forwardfor acl https ssl_fc http-request set-header X-Forwarded-Proto http if !https http-request set-header X-Forwarded-Proto https if https timeout client 30000 acl RMM var(txn.txnhost) -m sub -i rmm.example.com acl aclcrt_RMM var(txn.txnhost) -m reg -i ^([^\\.]*)\\.example\\.com(:([0-9]){1,5})?$ acl API var(txn.txnhost) -m sub -i api.example.com acl aclcrt_API var(txn.txnhost) -m reg -i ^([^\\.]*)\\.example\\.com(:([0-9]){1,5})?$ acl is_websocket hdr(Upgrade) -i WebSocket acl is_mesh var(txn.txnhost) -m beg -i mesh.example.com acl aclcrt_MESH-WebSocket var(txn.txnhost) -m reg -i ^([^\\.]*)\\.example\\.com(:([0-9]){1,5})?$ acl MESH var(txn.txnhost) -m sub -i mesh.example.com acl aclcrt_MESH var(txn.txnhost) -m reg -i ^([^\\.]*)\\.example\\.com(:([0-9]){1,5})?$ #PUT OTHER USE_BACKEND IN HERE use_backend Tactical_ipvANY if RMM aclcrt_RMM use_backend Tactical_ipvANY if API aclcrt_API use_backend Tactical-Mesh-WebSocket_ipvANY if is_websocket is_mesh aclcrt_MESH-WebSocket use_backend Tactical-Mesh_ipvANY if MESH aclcrt_MESH frontend http-to-https bind 0.0.0.0:80 mode http log global option http-keep-alive timeout client 30000 http-request redirect scheme https backend Tactical_ipvANY mode http id 100 log global timeout connect 30000 timeout server 30000 retries 3 option httpchk GET / server tactical 192.168.10.123:443 id 101 ssl check inter 1000 verify none backend Tactical-Mesh-WebSocket_ipvANY mode http id 113 log global timeout connect 3000 timeout server 3000 retries 3 timeout tunnel 3600000 http-request add-header X-Forwarded-Host %[req.hdr(Host)] http-request add-header X-Forwarded-Proto https server tactical 192.168.10.123:443 id 101 ssl verify none backend Tactical-Mesh_ipvANY mode http id 112 log global timeout connect 15000 timeout server 15000 retries 3 option httpchk GET / timeout tunnel 15000 http-request add-header X-Forwarded-Host %[req.hdr(Host)] http-request add-header X-Forwarded-Proto https server tactical 192.168.10.123:443 id 101 ssl check inter 1000 verify none fail2ban \u00b6 Install fail2ban \u00b6 sudo apt install -y fail2ban Set Tactical fail2ban filter conf File \u00b6 tacticalfail2banfilter=\"$(cat << EOF [Definition] failregex = ^<HOST>.*400.17.*$ ignoreregex = ^<HOST>.*200.*$ EOF )\" sudo echo \"${tacticalfail2banfilter}\" > /etc/fail2ban/filter.d/tacticalrmm.conf Set Tactical fail2ban jail conf File \u00b6 tacticalfail2banjail=\"$(cat << EOF [tacticalrmm] enabled = true port = 80,443 filter = tacticalrmm action = iptables-allports[name=tactical] logpath = /rmm/api/tacticalrmm/tacticalrmm/private/log/access.log maxretry = 3 bantime = 14400 findtime = 14400 EOF )\" sudo echo \"${tacticalfail2banjail}\" > /etc/fail2ban/jail.d/tacticalrmm.local Restart fail2ban \u00b6 sudo systemctl restart fail2ban Using purchased SSL certs instead of LetsEncrypt wildcards \u00b6 Credit to @dinger1986 How to change certs used by Tactical RMM to purchased ones (this can be a wildcard cert). You need to add the certificate private key and public keys to the following files: /etc/nginx/sites-available/rmm.conf /etc/nginx/sites-available/meshcentral.conf /etc/nginx/sites-available/frontend.conf /rmm/api/tacticalrmm/tacticalrmm/local_settings.py create a new folder for certs and allow tactical user permissions (assumed to be tactical) sudo mkdir /certs sudo chown -R tactical:tactical /certs\" Now move your certs into that folder. Open the api file and add the api certificate or if its a wildcard the directory should be /certs/yourdomain.com/ sudo nano /etc/nginx/sites-available/rmm.conf replace ssl_certificate /etc/letsencrypt/live/yourdomain.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/yourdomain.com/privkey.pem; with ssl_certificate /certs/api.yourdomain.com/fullchain.pem; ssl_certificate_key /certs/api.yourdomain.com/privkey.pem; Repeat the process for /etc/nginx/sites-available/meshcentral.conf /etc/nginx/sites-available/frontend.conf but change api. to: mesh. and rmm. respectively. Add the following to the last lines of /rmm/api/tacticalrmm/tacticalrmm/local_settings.py nano /rmm/api/tacticalrmm/tacticalrmm/local_settings.py add CERT_FILE = \"/certs/api.yourdomain.com/fullchain.pem\" KEY_FILE = \"/certs/api.yourdomain.com/privkey.pem\" Regenerate Nats Conf cd /rmm/api/tacticalrmm source ../env/bin/activate python manage.py reload_nats Restart services sudo systemctl restart rmm celery celerybeat nginx nats natsapi Use certbot to do acme challenge over http \u00b6 The standard SSL cert process in Tactical uses a DNS challenge that requires dns txt files to be updated with every run. The below script uses http challenge on the 3 separate ssl certs, one for each subdomain: rmm, api, mesh. They still have the same 3 month expiry. Restart the Tactical RMM server about every 2.5 months (80 days) for auto-renewed certs to become active. Note Your Tactical RMM server will need to have TCP Port: 80 exposed to the internet #!/bin/bash ###Set colours same as Tactical RMM install and Update YELLOW = '\\033[1;33m' GREEN = '\\033[0;32m' RED = '\\033[0;31m' NC = '\\033[0m' ### Ubuntu 20.04 Check UBU20 = $( grep 20 .04 \"/etc/\" * \"release\" ) if ! [[ $UBU20 ]] ; then echo -ne \"\\033[0;31mThis script will only work on Ubuntu 20.04\\e[0m\\n\" exit 1 fi cls () { printf \"\\033c\" } print_green () { printf > & 2 \" ${ GREEN } %0.s- ${ NC } \" { 1 ..80 } printf > & 2 \"\\n\" printf > & 2 \" ${ GREEN }${ 1 }${ NC } \\n\" printf > & 2 \" ${ GREEN } %0.s- ${ NC } \" { 1 ..80 } printf > & 2 \"\\n\" } cls ### Set variables for domains while [[ $rmmdomain ! = * [ . ] * [ . ] * ]] do echo -ne \" ${ YELLOW } Enter the subdomain used for the backend (e.g. api.example.com) ${ NC } : \" read rmmdomain done while [[ $frontenddomain ! = * [ . ] * [ . ] * ]] do echo -ne \" ${ YELLOW } Enter the subdomain used for the frontend (e.g. rmm.example.com) ${ NC } : \" read frontenddomain done while [[ $meshdomain ! = * [ . ] * [ . ] * ]] do echo -ne \" ${ YELLOW } Enter the subdomain used for meshcentral (e.g. mesh.example.com) ${ NC } : \" read meshdomain done echo -ne \" ${ YELLOW } Enter the current root domain (e.g. example.com or example.co.uk) ${ NC } : \" read rootdomain ### Setup Certificate Variables CERT_PRIV_KEY = /etc/letsencrypt/live/ ${ rootdomain } /privkey.pem CERT_PUB_KEY = /etc/letsencrypt/live/ ${ rootdomain } /fullchain.pem ### Make Letsencrypt directories sudo mkdir /var/www/letsencrypt sudo mkdir /var/www/letsencrypt/.mesh sudo mkdir /var/www/letsencrypt/.rmm sudo mkdir /var/www/letsencrypt/.api ### Remove config files for nginx sudo rm /etc/nginx/sites-available/rmm.conf sudo rm /etc/nginx/sites-available/meshcentral.conf sudo rm /etc/nginx/sites-available/frontend.conf sudo rm /etc/nginx/sites-enabled/rmm.conf sudo rm /etc/nginx/sites-enabled/meshcentral.conf sudo rm /etc/nginx/sites-enabled/frontend.conf ### Setup tactical nginx config files for letsencrypt nginxrmm = \" $( cat << EOF server_tokens off; upstream tacticalrmm { server unix:////rmm/api/tacticalrmm/tacticalrmm.sock; } map \\$http_user_agent \\$ignore_ua { \"~python-requests.*\" 0; \"~go-resty.*\" 0; default 1; } server { listen 80; server_name ${rmmdomain}; location /.well-known/acme-challenge/ { root /var/www/letsencrypt/.api/;} location / { return 301 https://\\$server_name\\$request_uri;} } server { listen 443 ssl; server_name ${rmmdomain}; client_max_body_size 300M; access_log /rmm/api/tacticalrmm/tacticalrmm/private/log/access.log; error_log /rmm/api/tacticalrmm/tacticalrmm/private/log/error.log; ssl_certificate ${CERT_PUB_KEY}; ssl_certificate_key ${CERT_PRIV_KEY}; ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384'; location /static/ { root /rmm/api/tacticalrmm; } location /private/ { internal; add_header \"Access-Control-Allow-Origin\" \"https://${frontenddomain}\"; alias /rmm/api/tacticalrmm/tacticalrmm/private/; } location ~ ^/ws/ { proxy_pass http://unix:/rmm/daphne.sock; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Host $server_name; } location /saltscripts/ { internal; add_header \"Access-Control-Allow-Origin\" \"https://${frontenddomain}\"; alias /srv/salt/scripts/userdefined/; } location /builtin/ { internal; add_header \"Access-Control-Allow-Origin\" \"https://${frontenddomain}\"; alias /srv/salt/scripts/; } location ~ ^/(natsapi) { allow 127.0.0.1; deny all; uwsgi_pass tacticalrmm; include /etc/nginx/uwsgi_params; uwsgi_read_timeout 500s; uwsgi_ignore_client_abort on; } location / { uwsgi_pass tacticalrmm; include /etc/nginx/uwsgi_params; uwsgi_read_timeout 9999s; uwsgi_ignore_client_abort on; } } EOF ) \" echo \" ${ nginxrmm } \" | sudo tee /etc/nginx/sites-available/rmm.conf > /dev/null nginxmesh = \" $( cat << EOF server { listen 80; server_name ${meshdomain}; location /.well-known/acme-challenge/ { root /var/www/letsencrypt/.mesh/;} location / { return 301 https://\\$server_name\\$request_uri;} } server { listen 443 ssl; proxy_send_timeout 330s; proxy_read_timeout 330s; server_name ${meshdomain}; ssl_certificate ${CERT_PUB_KEY}; ssl_certificate_key ${CERT_PRIV_KEY}; ssl_session_cache shared:WEBSSL:10m; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; location / { proxy_pass http://127.0.0.1:4430/; proxy_http_version 1.1; proxy_set_header Host \\$host; proxy_set_header Upgrade \\$http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_set_header X-Forwarded-Host \\$host:\\$server_port; proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto \\$scheme; } } EOF ) \" echo \" ${ nginxmesh } \" | sudo tee /etc/nginx/sites-available/meshcentral.conf > /dev/null nginxfrontend = \" $( cat << EOF server { server_name ${frontenddomain}; charset utf-8; location / { root /var/www/rmm/dist; try_files \\$uri \\$uri/ /index.html; add_header Cache-Control \"no-store, no-cache, must-revalidate\"; add_header Pragma \"no-cache\"; } error_log /var/log/nginx/frontend-error.log; access_log /var/log/nginx/frontend-access.log; listen 443 ssl; ssl_certificate ${CERT_PUB_KEY}; ssl_certificate_key ${CERT_PRIV_KEY}; ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384'; } server { listen 80; server_name ${frontenddomain}; location /.well-known/acme-challenge/ { root /var/www/letsencrypt/.rmm/;} location / { return 301 https://\\$host\\$request_uri;} } EOF ) \" echo \" ${ nginxfrontend } \" | sudo tee /etc/nginx/sites-available/frontend.conf > /dev/null ### Relink nginx config files sudo ln -s /etc/nginx/sites-available/rmm.conf /etc/nginx/sites-enabled/rmm.conf sudo ln -s /etc/nginx/sites-available/meshcentral.conf /etc/nginx/sites-enabled/meshcentral.conf sudo ln -s /etc/nginx/sites-available/frontend.conf /etc/nginx/sites-enabled/frontend.conf ### Restart nginx sudo systemctl restart nginx ### Get letsencrypt Certs sudo letsencrypt certonly --webroot -w /var/www/letsencrypt/.mesh/ -d ${ meshdomain } sudo letsencrypt certonly --webroot -w /var/www/letsencrypt/.rmm/ -d ${ frontenddomain } sudo letsencrypt certonly --webroot -w /var/www/letsencrypt/.api/ -d ${ rmmdomain } ### Ensure letsencrypt Permissions are correct sudo chown ${ USER } : ${ USER } -R /etc/letsencrypt sudo chmod 775 -R /etc/letsencrypt ### Set variables for new certs CERT_PRIV_KEY_API = /etc/letsencrypt/live/ ${ rmmdomain } /privkey.pem CERT_PUB_KEY_API = /etc/letsencrypt/live/ ${ rmmdomain } /fullchain.pem CERT_PRIV_KEY_RMM = /etc/letsencrypt/live/ ${ frontenddomain } /privkey.pem CERT_PUB_KEY_RMM = /etc/letsencrypt/live/ ${ frontenddomain } /fullchain.pem CERT_PRIV_KEY_MESH = /etc/letsencrypt/live/ ${ meshdomain } /privkey.pem CERT_PUB_KEY_MESH = /etc/letsencrypt/live/ ${ meshdomain } /fullchain.pem ### Replace certs in files rmmlocalsettings = \" $( cat << EOF CERT_FILE = \"${CERT_PUB_KEY_API}\" KEY_FILE = \"${CERT_PRIV_KEY_API}\" EOF ) \" echo \" ${ rmmlocalsettings } \" | tee --append /rmm/api/tacticalrmm/tacticalrmm/local_settings.py > /dev/null sudo sed -i \"s| ${ CERT_PRIV_KEY } | ${ CERT_PRIV_KEY_API } |g\" /etc/nginx/sites-available/rmm.conf sudo sed -i \"s| ${ CERT_PUB_KEY } | ${ CERT_PUB_KEY_API } |g\" /etc/nginx/sites-available/rmm.conf sudo sed -i \"s| ${ CERT_PRIV_KEY } | ${ CERT_PRIV_KEY_MESH } |g\" /etc/nginx/sites-available/meshcentral.conf sudo sed -i \"s| ${ CERT_PUB_KEY } | ${ CERT_PUB_KEY_MESH } |g\" /etc/nginx/sites-available/meshcentral.conf sudo sed -i \"s| ${ CERT_PRIV_KEY } | ${ CERT_PRIV_KEY_RMM } |g\" /etc/nginx/sites-available/frontend.conf sudo sed -i \"s| ${ CERT_PUB_KEY } | ${ CERT_PUB_KEY_RMM } |g\" /etc/nginx/sites-available/frontend.conf ### Remove Wildcard Cert rm -r /etc/letsencrypt/live/ ${ rootdomain } / rm -r /etc/letsencrypt/archive/ ${ rootdomain } / rm /etc/letsencrypt/renewal/ ${ rootdomain } .conf ### Regenerate Nats Conf cd /rmm/api/tacticalrmm source ../env/bin/activate python manage.py reload_nats ### Restart services for i in rmm celery celerybeat nginx nats natsapi do printf > & 2 \" ${ GREEN } Restarting ${ i } service... ${ NC } \\n\" sudo systemctl restart ${ i } done ###Renew certs can be done by sudo letsencrypt renew (this should automatically be in /etc/cron.d/certbot)","title":"Unsupported Scripts"},{"location":"unsupported_scripts/#unsupported-reference-scripts","text":"Note These are not supported scripts/configurations by Tactical RMM, but it's provided here for your reference.","title":"Unsupported Reference Scripts"},{"location":"unsupported_scripts/#haproxy","text":"Check/Change the mesh central config.json, some of the values may be set already, CertUrl must be changed to point to the HAProxy server.","title":"HAProxy"},{"location":"unsupported_scripts/#meshcentral-adjustment","text":"Credit to @bradhawkins Edit Meshcentral config nano /meshcentral/meshcentral-data/config.json Insert this (modify HAProxyIP to your network) { \"settings\": { \"Port\": 4430, \"AliasPort\": 443, \"RedirPort\": 800, \"TlsOffload\": \"127.0.0.1\", }, \"domains\": { \"\": { \"CertUrl\": \"https://HAProxyIP:443/\", } } } Restart meshcentral service meshcentral restart","title":"Meshcentral Adjustment"},{"location":"unsupported_scripts/#haproxy-config","text":"The order of use_backend is important Tactical-Mesh-WebSocket_ipvANY must be before Tactical-Mesh_ipvANY The values of timeout connect , timeout server , timeout tunnel in Tactical-Mesh-WebSocket have been configured to maintain a stable agent connection, however you may need to adjust these values to suit your environment. frontend HTTPS-merged bind 0.0.0.0:443 name 0.0.0.0:443 ssl crt-list /var/etc/haproxy/HTTPS.crt_list #ADJUST THIS TO YOUR OWN SSL CERTIFICATES mode http log global option socket-stats option dontlognull option http-server-close option forwardfor acl https ssl_fc http-request set-header X-Forwarded-Proto http if !https http-request set-header X-Forwarded-Proto https if https timeout client 30000 acl RMM var(txn.txnhost) -m sub -i rmm.example.com acl aclcrt_RMM var(txn.txnhost) -m reg -i ^([^\\.]*)\\.example\\.com(:([0-9]){1,5})?$ acl API var(txn.txnhost) -m sub -i api.example.com acl aclcrt_API var(txn.txnhost) -m reg -i ^([^\\.]*)\\.example\\.com(:([0-9]){1,5})?$ acl is_websocket hdr(Upgrade) -i WebSocket acl is_mesh var(txn.txnhost) -m beg -i mesh.example.com acl aclcrt_MESH-WebSocket var(txn.txnhost) -m reg -i ^([^\\.]*)\\.example\\.com(:([0-9]){1,5})?$ acl MESH var(txn.txnhost) -m sub -i mesh.example.com acl aclcrt_MESH var(txn.txnhost) -m reg -i ^([^\\.]*)\\.example\\.com(:([0-9]){1,5})?$ #PUT OTHER USE_BACKEND IN HERE use_backend Tactical_ipvANY if RMM aclcrt_RMM use_backend Tactical_ipvANY if API aclcrt_API use_backend Tactical-Mesh-WebSocket_ipvANY if is_websocket is_mesh aclcrt_MESH-WebSocket use_backend Tactical-Mesh_ipvANY if MESH aclcrt_MESH frontend http-to-https bind 0.0.0.0:80 mode http log global option http-keep-alive timeout client 30000 http-request redirect scheme https backend Tactical_ipvANY mode http id 100 log global timeout connect 30000 timeout server 30000 retries 3 option httpchk GET / server tactical 192.168.10.123:443 id 101 ssl check inter 1000 verify none backend Tactical-Mesh-WebSocket_ipvANY mode http id 113 log global timeout connect 3000 timeout server 3000 retries 3 timeout tunnel 3600000 http-request add-header X-Forwarded-Host %[req.hdr(Host)] http-request add-header X-Forwarded-Proto https server tactical 192.168.10.123:443 id 101 ssl verify none backend Tactical-Mesh_ipvANY mode http id 112 log global timeout connect 15000 timeout server 15000 retries 3 option httpchk GET / timeout tunnel 15000 http-request add-header X-Forwarded-Host %[req.hdr(Host)] http-request add-header X-Forwarded-Proto https server tactical 192.168.10.123:443 id 101 ssl check inter 1000 verify none","title":"HAProxy Config"},{"location":"unsupported_scripts/#fail2ban","text":"","title":"fail2ban"},{"location":"unsupported_scripts/#install-fail2ban","text":"sudo apt install -y fail2ban","title":"Install fail2ban"},{"location":"unsupported_scripts/#set-tactical-fail2ban-filter-conf-file","text":"tacticalfail2banfilter=\"$(cat << EOF [Definition] failregex = ^<HOST>.*400.17.*$ ignoreregex = ^<HOST>.*200.*$ EOF )\" sudo echo \"${tacticalfail2banfilter}\" > /etc/fail2ban/filter.d/tacticalrmm.conf","title":"Set Tactical fail2ban filter conf File"},{"location":"unsupported_scripts/#set-tactical-fail2ban-jail-conf-file","text":"tacticalfail2banjail=\"$(cat << EOF [tacticalrmm] enabled = true port = 80,443 filter = tacticalrmm action = iptables-allports[name=tactical] logpath = /rmm/api/tacticalrmm/tacticalrmm/private/log/access.log maxretry = 3 bantime = 14400 findtime = 14400 EOF )\" sudo echo \"${tacticalfail2banjail}\" > /etc/fail2ban/jail.d/tacticalrmm.local","title":"Set Tactical fail2ban jail conf File"},{"location":"unsupported_scripts/#restart-fail2ban","text":"sudo systemctl restart fail2ban","title":"Restart fail2ban"},{"location":"unsupported_scripts/#using-purchased-ssl-certs-instead-of-letsencrypt-wildcards","text":"Credit to @dinger1986 How to change certs used by Tactical RMM to purchased ones (this can be a wildcard cert). You need to add the certificate private key and public keys to the following files: /etc/nginx/sites-available/rmm.conf /etc/nginx/sites-available/meshcentral.conf /etc/nginx/sites-available/frontend.conf /rmm/api/tacticalrmm/tacticalrmm/local_settings.py create a new folder for certs and allow tactical user permissions (assumed to be tactical) sudo mkdir /certs sudo chown -R tactical:tactical /certs\" Now move your certs into that folder. Open the api file and add the api certificate or if its a wildcard the directory should be /certs/yourdomain.com/ sudo nano /etc/nginx/sites-available/rmm.conf replace ssl_certificate /etc/letsencrypt/live/yourdomain.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/yourdomain.com/privkey.pem; with ssl_certificate /certs/api.yourdomain.com/fullchain.pem; ssl_certificate_key /certs/api.yourdomain.com/privkey.pem; Repeat the process for /etc/nginx/sites-available/meshcentral.conf /etc/nginx/sites-available/frontend.conf but change api. to: mesh. and rmm. respectively. Add the following to the last lines of /rmm/api/tacticalrmm/tacticalrmm/local_settings.py nano /rmm/api/tacticalrmm/tacticalrmm/local_settings.py add CERT_FILE = \"/certs/api.yourdomain.com/fullchain.pem\" KEY_FILE = \"/certs/api.yourdomain.com/privkey.pem\" Regenerate Nats Conf cd /rmm/api/tacticalrmm source ../env/bin/activate python manage.py reload_nats Restart services sudo systemctl restart rmm celery celerybeat nginx nats natsapi","title":"Using purchased SSL certs instead of LetsEncrypt wildcards"},{"location":"unsupported_scripts/#use-certbot-to-do-acme-challenge-over-http","text":"The standard SSL cert process in Tactical uses a DNS challenge that requires dns txt files to be updated with every run. The below script uses http challenge on the 3 separate ssl certs, one for each subdomain: rmm, api, mesh. They still have the same 3 month expiry. Restart the Tactical RMM server about every 2.5 months (80 days) for auto-renewed certs to become active. Note Your Tactical RMM server will need to have TCP Port: 80 exposed to the internet #!/bin/bash ###Set colours same as Tactical RMM install and Update YELLOW = '\\033[1;33m' GREEN = '\\033[0;32m' RED = '\\033[0;31m' NC = '\\033[0m' ### Ubuntu 20.04 Check UBU20 = $( grep 20 .04 \"/etc/\" * \"release\" ) if ! [[ $UBU20 ]] ; then echo -ne \"\\033[0;31mThis script will only work on Ubuntu 20.04\\e[0m\\n\" exit 1 fi cls () { printf \"\\033c\" } print_green () { printf > & 2 \" ${ GREEN } %0.s- ${ NC } \" { 1 ..80 } printf > & 2 \"\\n\" printf > & 2 \" ${ GREEN }${ 1 }${ NC } \\n\" printf > & 2 \" ${ GREEN } %0.s- ${ NC } \" { 1 ..80 } printf > & 2 \"\\n\" } cls ### Set variables for domains while [[ $rmmdomain ! = * [ . ] * [ . ] * ]] do echo -ne \" ${ YELLOW } Enter the subdomain used for the backend (e.g. api.example.com) ${ NC } : \" read rmmdomain done while [[ $frontenddomain ! = * [ . ] * [ . ] * ]] do echo -ne \" ${ YELLOW } Enter the subdomain used for the frontend (e.g. rmm.example.com) ${ NC } : \" read frontenddomain done while [[ $meshdomain ! = * [ . ] * [ . ] * ]] do echo -ne \" ${ YELLOW } Enter the subdomain used for meshcentral (e.g. mesh.example.com) ${ NC } : \" read meshdomain done echo -ne \" ${ YELLOW } Enter the current root domain (e.g. example.com or example.co.uk) ${ NC } : \" read rootdomain ### Setup Certificate Variables CERT_PRIV_KEY = /etc/letsencrypt/live/ ${ rootdomain } /privkey.pem CERT_PUB_KEY = /etc/letsencrypt/live/ ${ rootdomain } /fullchain.pem ### Make Letsencrypt directories sudo mkdir /var/www/letsencrypt sudo mkdir /var/www/letsencrypt/.mesh sudo mkdir /var/www/letsencrypt/.rmm sudo mkdir /var/www/letsencrypt/.api ### Remove config files for nginx sudo rm /etc/nginx/sites-available/rmm.conf sudo rm /etc/nginx/sites-available/meshcentral.conf sudo rm /etc/nginx/sites-available/frontend.conf sudo rm /etc/nginx/sites-enabled/rmm.conf sudo rm /etc/nginx/sites-enabled/meshcentral.conf sudo rm /etc/nginx/sites-enabled/frontend.conf ### Setup tactical nginx config files for letsencrypt nginxrmm = \" $( cat << EOF server_tokens off; upstream tacticalrmm { server unix:////rmm/api/tacticalrmm/tacticalrmm.sock; } map \\$http_user_agent \\$ignore_ua { \"~python-requests.*\" 0; \"~go-resty.*\" 0; default 1; } server { listen 80; server_name ${rmmdomain}; location /.well-known/acme-challenge/ { root /var/www/letsencrypt/.api/;} location / { return 301 https://\\$server_name\\$request_uri;} } server { listen 443 ssl; server_name ${rmmdomain}; client_max_body_size 300M; access_log /rmm/api/tacticalrmm/tacticalrmm/private/log/access.log; error_log /rmm/api/tacticalrmm/tacticalrmm/private/log/error.log; ssl_certificate ${CERT_PUB_KEY}; ssl_certificate_key ${CERT_PRIV_KEY}; ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384'; location /static/ { root /rmm/api/tacticalrmm; } location /private/ { internal; add_header \"Access-Control-Allow-Origin\" \"https://${frontenddomain}\"; alias /rmm/api/tacticalrmm/tacticalrmm/private/; } location ~ ^/ws/ { proxy_pass http://unix:/rmm/daphne.sock; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Host $server_name; } location /saltscripts/ { internal; add_header \"Access-Control-Allow-Origin\" \"https://${frontenddomain}\"; alias /srv/salt/scripts/userdefined/; } location /builtin/ { internal; add_header \"Access-Control-Allow-Origin\" \"https://${frontenddomain}\"; alias /srv/salt/scripts/; } location ~ ^/(natsapi) { allow 127.0.0.1; deny all; uwsgi_pass tacticalrmm; include /etc/nginx/uwsgi_params; uwsgi_read_timeout 500s; uwsgi_ignore_client_abort on; } location / { uwsgi_pass tacticalrmm; include /etc/nginx/uwsgi_params; uwsgi_read_timeout 9999s; uwsgi_ignore_client_abort on; } } EOF ) \" echo \" ${ nginxrmm } \" | sudo tee /etc/nginx/sites-available/rmm.conf > /dev/null nginxmesh = \" $( cat << EOF server { listen 80; server_name ${meshdomain}; location /.well-known/acme-challenge/ { root /var/www/letsencrypt/.mesh/;} location / { return 301 https://\\$server_name\\$request_uri;} } server { listen 443 ssl; proxy_send_timeout 330s; proxy_read_timeout 330s; server_name ${meshdomain}; ssl_certificate ${CERT_PUB_KEY}; ssl_certificate_key ${CERT_PRIV_KEY}; ssl_session_cache shared:WEBSSL:10m; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; location / { proxy_pass http://127.0.0.1:4430/; proxy_http_version 1.1; proxy_set_header Host \\$host; proxy_set_header Upgrade \\$http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_set_header X-Forwarded-Host \\$host:\\$server_port; proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto \\$scheme; } } EOF ) \" echo \" ${ nginxmesh } \" | sudo tee /etc/nginx/sites-available/meshcentral.conf > /dev/null nginxfrontend = \" $( cat << EOF server { server_name ${frontenddomain}; charset utf-8; location / { root /var/www/rmm/dist; try_files \\$uri \\$uri/ /index.html; add_header Cache-Control \"no-store, no-cache, must-revalidate\"; add_header Pragma \"no-cache\"; } error_log /var/log/nginx/frontend-error.log; access_log /var/log/nginx/frontend-access.log; listen 443 ssl; ssl_certificate ${CERT_PUB_KEY}; ssl_certificate_key ${CERT_PRIV_KEY}; ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384'; } server { listen 80; server_name ${frontenddomain}; location /.well-known/acme-challenge/ { root /var/www/letsencrypt/.rmm/;} location / { return 301 https://\\$host\\$request_uri;} } EOF ) \" echo \" ${ nginxfrontend } \" | sudo tee /etc/nginx/sites-available/frontend.conf > /dev/null ### Relink nginx config files sudo ln -s /etc/nginx/sites-available/rmm.conf /etc/nginx/sites-enabled/rmm.conf sudo ln -s /etc/nginx/sites-available/meshcentral.conf /etc/nginx/sites-enabled/meshcentral.conf sudo ln -s /etc/nginx/sites-available/frontend.conf /etc/nginx/sites-enabled/frontend.conf ### Restart nginx sudo systemctl restart nginx ### Get letsencrypt Certs sudo letsencrypt certonly --webroot -w /var/www/letsencrypt/.mesh/ -d ${ meshdomain } sudo letsencrypt certonly --webroot -w /var/www/letsencrypt/.rmm/ -d ${ frontenddomain } sudo letsencrypt certonly --webroot -w /var/www/letsencrypt/.api/ -d ${ rmmdomain } ### Ensure letsencrypt Permissions are correct sudo chown ${ USER } : ${ USER } -R /etc/letsencrypt sudo chmod 775 -R /etc/letsencrypt ### Set variables for new certs CERT_PRIV_KEY_API = /etc/letsencrypt/live/ ${ rmmdomain } /privkey.pem CERT_PUB_KEY_API = /etc/letsencrypt/live/ ${ rmmdomain } /fullchain.pem CERT_PRIV_KEY_RMM = /etc/letsencrypt/live/ ${ frontenddomain } /privkey.pem CERT_PUB_KEY_RMM = /etc/letsencrypt/live/ ${ frontenddomain } /fullchain.pem CERT_PRIV_KEY_MESH = /etc/letsencrypt/live/ ${ meshdomain } /privkey.pem CERT_PUB_KEY_MESH = /etc/letsencrypt/live/ ${ meshdomain } /fullchain.pem ### Replace certs in files rmmlocalsettings = \" $( cat << EOF CERT_FILE = \"${CERT_PUB_KEY_API}\" KEY_FILE = \"${CERT_PRIV_KEY_API}\" EOF ) \" echo \" ${ rmmlocalsettings } \" | tee --append /rmm/api/tacticalrmm/tacticalrmm/local_settings.py > /dev/null sudo sed -i \"s| ${ CERT_PRIV_KEY } | ${ CERT_PRIV_KEY_API } |g\" /etc/nginx/sites-available/rmm.conf sudo sed -i \"s| ${ CERT_PUB_KEY } | ${ CERT_PUB_KEY_API } |g\" /etc/nginx/sites-available/rmm.conf sudo sed -i \"s| ${ CERT_PRIV_KEY } | ${ CERT_PRIV_KEY_MESH } |g\" /etc/nginx/sites-available/meshcentral.conf sudo sed -i \"s| ${ CERT_PUB_KEY } | ${ CERT_PUB_KEY_MESH } |g\" /etc/nginx/sites-available/meshcentral.conf sudo sed -i \"s| ${ CERT_PRIV_KEY } | ${ CERT_PRIV_KEY_RMM } |g\" /etc/nginx/sites-available/frontend.conf sudo sed -i \"s| ${ CERT_PUB_KEY } | ${ CERT_PUB_KEY_RMM } |g\" /etc/nginx/sites-available/frontend.conf ### Remove Wildcard Cert rm -r /etc/letsencrypt/live/ ${ rootdomain } / rm -r /etc/letsencrypt/archive/ ${ rootdomain } / rm /etc/letsencrypt/renewal/ ${ rootdomain } .conf ### Regenerate Nats Conf cd /rmm/api/tacticalrmm source ../env/bin/activate python manage.py reload_nats ### Restart services for i in rmm celery celerybeat nginx nats natsapi do printf > & 2 \" ${ GREEN } Restarting ${ i } service... ${ NC } \\n\" sudo systemctl restart ${ i } done ###Renew certs can be done by sudo letsencrypt renew (this should automatically be in /etc/cron.d/certbot)","title":"Use certbot to do acme challenge over http"},{"location":"update_agents/","text":"Updating Agents \u00b6 Warning The agent's version is directly tied to the RMM's version. For example, currently RMM version 0.4.17 is compatible with agent version 1.4.6 and lower. You should never attempt to manually update an agent to a newer version without first making sure your RMM is on the latest version. Updating from the Web UI \u00b6 Agents will automatically self update themselves if you have auto self update enabled in Settings > Global Settings There is a background job that runs every hour, at 35 minutes past the hour and sends any online agents an update command if it detects they are on an older version. You can also trigger this background job to run on demand by clicking Agents > Update Agents in the web UI: You can individually choose which agents to update, or simply Select All. The RMM will automatically skip any agents that don't need updating. You can trigger this manual agent update anytime you want. It is safe to spam, and won't run if an agent update task is already running. It will also make sure agents update to the correct version, in case they are an older version that cannot be directly upgraded to the latest version. For example, agents older than version 1.3.0 must first be updated to 1.3.0 before they can go any further. Manually updating from the command line on the agent \u00b6 You should never need to do this but might be needed to troubleshoot agents that are not updating automatically. Download the winagent-vX.X.X.exe executable from the github releases page and place it somewhere on the filesystem. Open CMD as admin and call the exe like so: C:\\Windows\\Temp>winagent-vX.X.X.exe /VERYSILENT /LOG=agentupdate.txt This command will return immediately since it spawns a background process to run the update. The agent will take around 30 seconds to fully update. You can check the agentupdate.txt log file that is created for troubleshooting.","title":"Updating Agents"},{"location":"update_agents/#updating-agents","text":"Warning The agent's version is directly tied to the RMM's version. For example, currently RMM version 0.4.17 is compatible with agent version 1.4.6 and lower. You should never attempt to manually update an agent to a newer version without first making sure your RMM is on the latest version.","title":"Updating Agents"},{"location":"update_agents/#updating-from-the-web-ui","text":"Agents will automatically self update themselves if you have auto self update enabled in Settings > Global Settings There is a background job that runs every hour, at 35 minutes past the hour and sends any online agents an update command if it detects they are on an older version. You can also trigger this background job to run on demand by clicking Agents > Update Agents in the web UI: You can individually choose which agents to update, or simply Select All. The RMM will automatically skip any agents that don't need updating. You can trigger this manual agent update anytime you want. It is safe to spam, and won't run if an agent update task is already running. It will also make sure agents update to the correct version, in case they are an older version that cannot be directly upgraded to the latest version. For example, agents older than version 1.3.0 must first be updated to 1.3.0 before they can go any further.","title":"Updating from the Web UI"},{"location":"update_agents/#manually-updating-from-the-command-line-on-the-agent","text":"You should never need to do this but might be needed to troubleshoot agents that are not updating automatically. Download the winagent-vX.X.X.exe executable from the github releases page and place it somewhere on the filesystem. Open CMD as admin and call the exe like so: C:\\Windows\\Temp>winagent-vX.X.X.exe /VERYSILENT /LOG=agentupdate.txt This command will return immediately since it spawns a background process to run the update. The agent will take around 30 seconds to fully update. You can check the agentupdate.txt log file that is created for troubleshooting.","title":"Manually updating from the command line on the agent"},{"location":"update_docker/","text":"Updating the RMM (Docker) \u00b6 Updating to the latest RMM version \u00b6 Tactical RMM updates the docker images on every release and should be available within a few minutes SSH into your server as a root user and run the below commands: cd [ dir/with/compose/file ] mv docker-compose.yml docker-compose.yml.old wget https://raw.githubusercontent.com/wh1te909/tacticalrmm/master/docker/docker-compose.yml sudo docker-compose pull sudo docker-compose down sudo docker-compose up -d --remove-orphans Keeping your Let's Encrypt certificate up to date \u00b6 To renew your Let's Encrypt wildcard cert, run the following command, replacing example.com with your domain and admin@example.com with your email: sudo certbot certonly --manual -d *.example.com --agree-tos --no-bootstrap --manual-public-ip-logging-ok --preferred-challenges dns -m admin@example.com --no-eff-email Verify the domain with the TXT record. Once issued, run the below commands to base64 encode the certificates and add then to the .env file echo \"CERT_PUB_KEY= $( sudo base64 -w 0 /etc/letsencrypt/live/ ${ rootdomain } /fullchain.pem ) \" >> .env echo \"CERT_PRIV_KEY= $( sudo base64 -w 0 /etc/letsencrypt/live/ ${ rootdomain } /privkey.pem ) \" >> .env Warning You must remove the old and any duplicate entries for CERT_PUB_KEY and CERT_PRIV_KEY in the .env file Now run sudo docker-compose restart and the new certificate will be in effect","title":"Updating the RMM (Docker)"},{"location":"update_docker/#updating-the-rmm-docker","text":"","title":"Updating the RMM (Docker)"},{"location":"update_docker/#updating-to-the-latest-rmm-version","text":"Tactical RMM updates the docker images on every release and should be available within a few minutes SSH into your server as a root user and run the below commands: cd [ dir/with/compose/file ] mv docker-compose.yml docker-compose.yml.old wget https://raw.githubusercontent.com/wh1te909/tacticalrmm/master/docker/docker-compose.yml sudo docker-compose pull sudo docker-compose down sudo docker-compose up -d --remove-orphans","title":"Updating to the latest RMM version"},{"location":"update_docker/#keeping-your-lets-encrypt-certificate-up-to-date","text":"To renew your Let's Encrypt wildcard cert, run the following command, replacing example.com with your domain and admin@example.com with your email: sudo certbot certonly --manual -d *.example.com --agree-tos --no-bootstrap --manual-public-ip-logging-ok --preferred-challenges dns -m admin@example.com --no-eff-email Verify the domain with the TXT record. Once issued, run the below commands to base64 encode the certificates and add then to the .env file echo \"CERT_PUB_KEY= $( sudo base64 -w 0 /etc/letsencrypt/live/ ${ rootdomain } /fullchain.pem ) \" >> .env echo \"CERT_PRIV_KEY= $( sudo base64 -w 0 /etc/letsencrypt/live/ ${ rootdomain } /privkey.pem ) \" >> .env Warning You must remove the old and any duplicate entries for CERT_PUB_KEY and CERT_PRIV_KEY in the .env file Now run sudo docker-compose restart and the new certificate will be in effect","title":"Keeping your Let's Encrypt certificate up to date"},{"location":"update_server/","text":"Updating the RMM \u00b6 Keeping your linux server up to date \u00b6 You should periodically run sudo apt update and sudo apt -y upgrade to keep your server up to date. Other than this, you should avoid making any changes to your server and let the update.sh script handle everything else for you. Updating to the latest RMM version \u00b6 Danger Do not attempt to manually edit the update script or any configuration files unless specifically told to by one of the developers. Since this software is completely self hosted and we have no access to your server, we have to assume you have not made any config changes to any of the files or services on your server, and the update script will assume this. You should also never attempt to automate running the update script via cron. The update script will update itself if needed to the latest version when you run it, and them prompt you to run it again. Sometimes, manual intervention will be required during an update in the form of yes/no prompts, so attempting to automate this will ignore these prompts and cause your installation to break. SSH into your server as the linux user you created during install. Never run any update scripts or commands as the root user. This will mess up permissions and break your installation. Download the update script and run it: wget -N https://raw.githubusercontent.com/wh1te909/tacticalrmm/master/update.sh chmod +x update.sh ./update.sh If you are already on the latest version, the update script will notify you of this and return immediately. You can pass the optional --force flag to the update script to forcefully run through an update, which will bypass the check for latest version. ./update.sh --force This is usefull for a botched update that might have not completed fully. The update script will also fix any permissions that might have gotten messed up during a botched update, or if you accidentally ran the update script as the root user. Warning Do not attempt to manually update MeshCentral to a newer version. You should let the update.sh script handle this for you. The developers will test MeshCentral and make sure integration does not break before bumping the mesh version. Keeping your Let's Encrypt certificate up to date \u00b6 Info Currently, the update script does not automatically renew your Let's Encrypt wildcard certificate, which expires every 3 months, since this is non-trivial to automate using the DNS TXT record method. To renew your Let's Encrypt wildcard cert, run the following command, replacing example.com with your domain and admin@example.com with your email: sudo certbot certonly --manual -d *.example.com --agree-tos --no-bootstrap --manual-public-ip-logging-ok --preferred-challenges dns -m admin@example.com --no-eff-email Same instructions as during install for verifying the TXT record has propogated before hitting Enter. After this you have renewed the cert, simply run the update.sh script, passing it the --force flag. ./update.sh --force Keep an eye on your disk space \u00b6 If you're running low, shrink you database Choose Tools menu > Server Maintenance > Prune DB Tables At server command prompt run sudo -u postgres psql -d tacticalrmm -c \"vacuum full logs_auditlog\" sudo -u postgres psql -d tacticalrmm -c \"vacuum full logs_auditlog\"","title":"Updating the RMM"},{"location":"update_server/#updating-the-rmm","text":"","title":"Updating the RMM"},{"location":"update_server/#keeping-your-linux-server-up-to-date","text":"You should periodically run sudo apt update and sudo apt -y upgrade to keep your server up to date. Other than this, you should avoid making any changes to your server and let the update.sh script handle everything else for you.","title":"Keeping your linux server up to date"},{"location":"update_server/#updating-to-the-latest-rmm-version","text":"Danger Do not attempt to manually edit the update script or any configuration files unless specifically told to by one of the developers. Since this software is completely self hosted and we have no access to your server, we have to assume you have not made any config changes to any of the files or services on your server, and the update script will assume this. You should also never attempt to automate running the update script via cron. The update script will update itself if needed to the latest version when you run it, and them prompt you to run it again. Sometimes, manual intervention will be required during an update in the form of yes/no prompts, so attempting to automate this will ignore these prompts and cause your installation to break. SSH into your server as the linux user you created during install. Never run any update scripts or commands as the root user. This will mess up permissions and break your installation. Download the update script and run it: wget -N https://raw.githubusercontent.com/wh1te909/tacticalrmm/master/update.sh chmod +x update.sh ./update.sh If you are already on the latest version, the update script will notify you of this and return immediately. You can pass the optional --force flag to the update script to forcefully run through an update, which will bypass the check for latest version. ./update.sh --force This is usefull for a botched update that might have not completed fully. The update script will also fix any permissions that might have gotten messed up during a botched update, or if you accidentally ran the update script as the root user. Warning Do not attempt to manually update MeshCentral to a newer version. You should let the update.sh script handle this for you. The developers will test MeshCentral and make sure integration does not break before bumping the mesh version.","title":"Updating to the latest RMM version"},{"location":"update_server/#keeping-your-lets-encrypt-certificate-up-to-date","text":"Info Currently, the update script does not automatically renew your Let's Encrypt wildcard certificate, which expires every 3 months, since this is non-trivial to automate using the DNS TXT record method. To renew your Let's Encrypt wildcard cert, run the following command, replacing example.com with your domain and admin@example.com with your email: sudo certbot certonly --manual -d *.example.com --agree-tos --no-bootstrap --manual-public-ip-logging-ok --preferred-challenges dns -m admin@example.com --no-eff-email Same instructions as during install for verifying the TXT record has propogated before hitting Enter. After this you have renewed the cert, simply run the update.sh script, passing it the --force flag. ./update.sh --force","title":"Keeping your Let's Encrypt certificate up to date"},{"location":"update_server/#keep-an-eye-on-your-disk-space","text":"If you're running low, shrink you database Choose Tools menu > Server Maintenance > Prune DB Tables At server command prompt run sudo -u postgres psql -d tacticalrmm -c \"vacuum full logs_auditlog\" sudo -u postgres psql -d tacticalrmm -c \"vacuum full logs_auditlog\"","title":"Keep an eye on your disk space"},{"location":"functions/alerting/","text":"Alerting Overview \u00b6 Alerting and notifications can be managed centrally using Alert Templates. All an alert template does is configure the Email, Text and Dashboard alert check boxes on Agents, Checks, and Automated Tasks. Using Alert Templates also enables additional feature like: Periodic notifications if an alert is left unresolved Being able to notify on certain alert severities Sending notifications when an alert is resolved Executing scripts when an alert is triggered or resolved Setting up Email Alert Examples Supported Notifications \u00b6 Email Alerts - Sends email to configured set of email addresses SMS Alerts - Sends text messages to configured set of numbers Dashboard Alerts - A notification popup will show up and be visible in the dashboard Alert Severities \u00b6 Info Agent overdue alerts are always of severity Error Alert severities are configured directly on the Check or Automated Task. When the Check/Automated Task fails, it will create an alert of the specified severity. The severity types are: Informational Warning Error Adding Alert Templates \u00b6 To create an alert template, go to Settings > Alerts Manager . Then click New The available options are: General Settings \u00b6 Name - The name that is used to identify the Alert Template in the dashboard Email Recipients - Sets the list of email recipients. If this isn't set the email recipients will global settings will be used. From Email - Sets the From email address of the notification. If this isn't set the From address from global settings is used. SMS Recipients - Sets the list of text recipients. If this isn't set the sms list from global settings is used. Action Settings \u00b6 Failure Action - Runs the selected script once on any agent. This is useful for running one-time tasks like sending an http request to an external system to create a ticket. Failure Action Args - Optionally pass in arguments to the failure script. Failure Action Timeout - Sets the timeout for the script. Resolved Action - Runs the selected script once on any agent if the alert is resolved. This is useful for running one-time tasks like sending an http request to an external system to close the ticket that was created. Resolved Action Args - Optionally pass in arguments to the resolved script. Resolved Action Timeout - Sets the timeout for the script. Run actions only on: \u00b6 Agents - If Enabled, will run script failure/resolved actions on agent overdue alerts else no alert actions will be triggered for agent overdue alerts Checks - If Enabled, will run script failure/resolved actions on check alerts else no alert actions will be triggered check alerts Tasks - If Enabled, will run script failure/resolved actions on automated task alerts else no alert actions will be triggered automated task alerts Agent/Check/Task Failure Settings \u00b6 Email - When Enabled , will send an email notification and override the Email Alert checkbox on the Agent/Check/Task. When Not Configured , the Email Alert checkbox on the Agent/Check/Task will take effect. If Disabled , no email notifications will be sent and will override any Email alert checkbox on the Agent/Check/Task Text - When Enabled , will send a text notification and override the SMS Alert checkbox on the Agent/Check/Task. When Not Configured , the SMS Alert checkbox on the Agent/Check/Task will take effect. If Disabled , no SMS notifications will be sent and will override any SMS Alert checkbox on the Agent/Check/Task Dashboard - When Enabled , will send a dashboard notification and override the Dashboard Alert checkbox on the Agent/Check/Task. When Not Configured , the Dashboard Alert checkbox on the Agent/Check/Task will take effect. If Disabled , no SMS notifications will be sent and will override any Dashboard Alert checkbox on the Agent/Check/Task Alert again if not resolved after (days) - This sends another notification if the alert isn't resolved after the set amount of days. Set to 0 to disable this Alert on severity - Only applicable to Check and Task alert notifications. This will only send alerts when they are of the configured severity. Info Alert on Severity needs to be configured for check and task notifications to be sent! Agent/Check/Task Resolved Settings \u00b6 Email - If enabled, sends an email notification when an alert is resolved Text - If enabled, sends a text messaged when an alert is resolved Applying Alert Templates \u00b6 Alert templates can be configured Globally, through an Automation Policy, or set directly on the Client or Site. To apply Globally , navigate to Settings > Global Settings . Set the Alert Template dropdown and save. You can configure an alert template on an automation policy by navigating to Settings > Automation Manager , and clicking the Assign Alert Template click on the policy, or right-clicking the policy and selecting Assign Alert Template To configure on a Client or Site, right-click on one in the Client/Site tree view and select Assign Alert Template Alert Template Exclusions \u00b6 You can exclude Clients, Sites, and Agents from alert templates. To do this you can: right-click on the Alert Template in Alerts Manager and select Exclusions select the Alert Exclusions link in the Alert Template row. You can also Exclude Desktops from the alert template. This is useful if you only care about servers. Alert Template inheritance \u00b6 Alerts are applied in the following order. The agent picks the closest matching alert template. Policy w/ Alert Template applied to Site Site Policy w/ Alert Template applied to Client Client Default Alert Template","title":"Alerting"},{"location":"functions/alerting/#alerting-overview","text":"Alerting and notifications can be managed centrally using Alert Templates. All an alert template does is configure the Email, Text and Dashboard alert check boxes on Agents, Checks, and Automated Tasks. Using Alert Templates also enables additional feature like: Periodic notifications if an alert is left unresolved Being able to notify on certain alert severities Sending notifications when an alert is resolved Executing scripts when an alert is triggered or resolved Setting up Email Alert Examples","title":"Alerting Overview"},{"location":"functions/alerting/#supported-notifications","text":"Email Alerts - Sends email to configured set of email addresses SMS Alerts - Sends text messages to configured set of numbers Dashboard Alerts - A notification popup will show up and be visible in the dashboard","title":"Supported Notifications"},{"location":"functions/alerting/#alert-severities","text":"Info Agent overdue alerts are always of severity Error Alert severities are configured directly on the Check or Automated Task. When the Check/Automated Task fails, it will create an alert of the specified severity. The severity types are: Informational Warning Error","title":"Alert Severities"},{"location":"functions/alerting/#adding-alert-templates","text":"To create an alert template, go to Settings > Alerts Manager . Then click New The available options are:","title":"Adding Alert Templates"},{"location":"functions/alerting/#general-settings","text":"Name - The name that is used to identify the Alert Template in the dashboard Email Recipients - Sets the list of email recipients. If this isn't set the email recipients will global settings will be used. From Email - Sets the From email address of the notification. If this isn't set the From address from global settings is used. SMS Recipients - Sets the list of text recipients. If this isn't set the sms list from global settings is used.","title":"General Settings"},{"location":"functions/alerting/#action-settings","text":"Failure Action - Runs the selected script once on any agent. This is useful for running one-time tasks like sending an http request to an external system to create a ticket. Failure Action Args - Optionally pass in arguments to the failure script. Failure Action Timeout - Sets the timeout for the script. Resolved Action - Runs the selected script once on any agent if the alert is resolved. This is useful for running one-time tasks like sending an http request to an external system to close the ticket that was created. Resolved Action Args - Optionally pass in arguments to the resolved script. Resolved Action Timeout - Sets the timeout for the script.","title":"Action Settings"},{"location":"functions/alerting/#run-actions-only-on","text":"Agents - If Enabled, will run script failure/resolved actions on agent overdue alerts else no alert actions will be triggered for agent overdue alerts Checks - If Enabled, will run script failure/resolved actions on check alerts else no alert actions will be triggered check alerts Tasks - If Enabled, will run script failure/resolved actions on automated task alerts else no alert actions will be triggered automated task alerts","title":"Run actions only on:"},{"location":"functions/alerting/#agentchecktask-failure-settings","text":"Email - When Enabled , will send an email notification and override the Email Alert checkbox on the Agent/Check/Task. When Not Configured , the Email Alert checkbox on the Agent/Check/Task will take effect. If Disabled , no email notifications will be sent and will override any Email alert checkbox on the Agent/Check/Task Text - When Enabled , will send a text notification and override the SMS Alert checkbox on the Agent/Check/Task. When Not Configured , the SMS Alert checkbox on the Agent/Check/Task will take effect. If Disabled , no SMS notifications will be sent and will override any SMS Alert checkbox on the Agent/Check/Task Dashboard - When Enabled , will send a dashboard notification and override the Dashboard Alert checkbox on the Agent/Check/Task. When Not Configured , the Dashboard Alert checkbox on the Agent/Check/Task will take effect. If Disabled , no SMS notifications will be sent and will override any Dashboard Alert checkbox on the Agent/Check/Task Alert again if not resolved after (days) - This sends another notification if the alert isn't resolved after the set amount of days. Set to 0 to disable this Alert on severity - Only applicable to Check and Task alert notifications. This will only send alerts when they are of the configured severity. Info Alert on Severity needs to be configured for check and task notifications to be sent!","title":"Agent/Check/Task Failure Settings"},{"location":"functions/alerting/#agentchecktask-resolved-settings","text":"Email - If enabled, sends an email notification when an alert is resolved Text - If enabled, sends a text messaged when an alert is resolved","title":"Agent/Check/Task Resolved Settings"},{"location":"functions/alerting/#applying-alert-templates","text":"Alert templates can be configured Globally, through an Automation Policy, or set directly on the Client or Site. To apply Globally , navigate to Settings > Global Settings . Set the Alert Template dropdown and save. You can configure an alert template on an automation policy by navigating to Settings > Automation Manager , and clicking the Assign Alert Template click on the policy, or right-clicking the policy and selecting Assign Alert Template To configure on a Client or Site, right-click on one in the Client/Site tree view and select Assign Alert Template","title":"Applying Alert Templates"},{"location":"functions/alerting/#alert-template-exclusions","text":"You can exclude Clients, Sites, and Agents from alert templates. To do this you can: right-click on the Alert Template in Alerts Manager and select Exclusions select the Alert Exclusions link in the Alert Template row. You can also Exclude Desktops from the alert template. This is useful if you only care about servers.","title":"Alert Template Exclusions"},{"location":"functions/alerting/#alert-template-inheritance","text":"Alerts are applied in the following order. The agent picks the closest matching alert template. Policy w/ Alert Template applied to Site Site Policy w/ Alert Template applied to Client Client Default Alert Template","title":"Alert Template inheritance"},{"location":"functions/api/","text":"API Access \u00b6 Version added: v0.8.3 API Keys can be created to access any of TacticalRMM's api endpoints, which will bypass 2fa authentication When creating the key you'll need to choose a user, which will reflect what permissions the key has based on the user's role. Navigate to Settings > Global Settings > API Keys to generate a key Headers: { \"Content-Type\" : \"application/json\" , \"X-API-KEY\" : \"J57BXCFDA2WBCXH0XTELBR5KAI69CNCZ\" } Example curl request: curl https://api.example.com/clients/clients/ -H \"X-API-KEY: Y57BXCFAA9WBCXH0XTEL6R5KAK69CNCZ\"","title":"API Access"},{"location":"functions/api/#api-access","text":"Version added: v0.8.3 API Keys can be created to access any of TacticalRMM's api endpoints, which will bypass 2fa authentication When creating the key you'll need to choose a user, which will reflect what permissions the key has based on the user's role. Navigate to Settings > Global Settings > API Keys to generate a key Headers: { \"Content-Type\" : \"application/json\" , \"X-API-KEY\" : \"J57BXCFDA2WBCXH0XTELBR5KAI69CNCZ\" } Example curl request: curl https://api.example.com/clients/clients/ -H \"X-API-KEY: Y57BXCFAA9WBCXH0XTEL6R5KAK69CNCZ\"","title":"API Access"},{"location":"functions/automated_tasks/","text":"Automated Tasks \u00b6 Collector Tasks \u00b6 Collector tasks allow saving data from script output directly to a custom field. The collector task will only save the last line of standard output of the script. You can create collector tasks by adding it to an Automation Policy or adding it directly to an agent. During creation, select the Collector checkbox and select the custom field to save to. You can only save to agent custom fields at this time. See Custom Fields and Scripting for more information","title":"Automated Tasks"},{"location":"functions/automated_tasks/#automated-tasks","text":"","title":"Automated Tasks"},{"location":"functions/automated_tasks/#collector-tasks","text":"Collector tasks allow saving data from script output directly to a custom field. The collector task will only save the last line of standard output of the script. You can create collector tasks by adding it to an Automation Policy or adding it directly to an agent. During creation, select the Collector checkbox and select the custom field to save to. You can only save to agent custom fields at this time. See Custom Fields and Scripting for more information","title":"Collector Tasks"},{"location":"functions/automation_policies/","text":"Automation Policies \u00b6 Automation policies in Tactical RMM allow for mass deployment of Checks, Automated Tasks, Patch Policies, and Alert Templates. You can apply Automation Policies to: Global Settings Client Site Agent Adding Automation Policies \u00b6 In the dashboard, navigate to Settings > Automation Manager . Use the Add button to create a blank Automation Policy. The options available are: Name - The name that will be used to identify the automation policy in the dashboard Description - Optional description of the automation policy Enabled - Specifies if the automation policy is active or not Enforced - Specifies that the automation policy should overwrite any conflicting checks configured directly on the agent Policy Inheritance \u00b6","title":"Automation Policies"},{"location":"functions/automation_policies/#automation-policies","text":"Automation policies in Tactical RMM allow for mass deployment of Checks, Automated Tasks, Patch Policies, and Alert Templates. You can apply Automation Policies to: Global Settings Client Site Agent","title":"Automation Policies"},{"location":"functions/automation_policies/#adding-automation-policies","text":"In the dashboard, navigate to Settings > Automation Manager . Use the Add button to create a blank Automation Policy. The options available are: Name - The name that will be used to identify the automation policy in the dashboard Description - Optional description of the automation policy Enabled - Specifies if the automation policy is active or not Enforced - Specifies that the automation policy should overwrite any conflicting checks configured directly on the agent","title":"Adding Automation Policies"},{"location":"functions/automation_policies/#policy-inheritance","text":"","title":"Policy Inheritance"},{"location":"functions/custom_fields/","text":"Custom Fields \u00b6 Info v0.5.0 adds support for custom fields to be used in the dashboard and in scripts. Adding Custom Fields \u00b6 In the dashboard, go to Settings > Global Settings > Custom Fields and click Add Custom Field . Info Everything between {{}} is CaSe sEnSiTive The following options are available to configure on custom fields: Model - This is the object that the custom field will be added to. The available options are: Agent Site Client Name - Sets the name of the custom field. This will be used to identify the custom field in the dashboard and in scripts. Field Type - Sets the type of field. Below are the allowed types. Text Number Single select dropdown Multi-select dropdown Checkbox DateTime Input Options - Only available on Single and Multiple-select dropdowns . Sets the options to choose from. Default Value - If no value is found when looking up the custom field; this value will instead be supplied. Required - This makes the field required when adding new Clients, Sites, and Agents. If this is set a default value will need to be set as well Hide in Dashboard - This will not show the custom field in Client, Site, and Agent forms in the dashboard. This is useful if the custom field's value is updated by a collector task and only supplied to scripts. Using Custom Fields in the Dashboard \u00b6 Once the custom fields are added, they will show up in the Client, Site, and Agent Add/Edit forms. Using Custom Fields in Scripts \u00b6 Tactical RMM allows for passing various database fields for Clients, Sites, and Agents in scripts. This includes custom fields as well! Warning The characters within the brackets is case-sensitive! In your script's arguments, use the notation {{client.AV_KEY}} . This will lookup the client for the agent that the script is running on and find the custom field named AV_KEY and replace that with the value. The same is also true for {{site.no_patching}} and {{agent.Another Field}} For more information see SCRIPTING PAGE Populating Custom Fields automatically \u00b6 Tactical RMM supports automatically collecting information and saving them directly to custom fields. This is made possible by creating Collector Tasks . These are just normal Automated Tasks, but instead they will save the last line of the standard output to the custom field that is selected. Info To populate a multiple select custom field, return a string with the options separated by a comma \"This,will,be,an,array\" For more information See Collector Tasks","title":"Custom Fields"},{"location":"functions/custom_fields/#custom-fields","text":"Info v0.5.0 adds support for custom fields to be used in the dashboard and in scripts.","title":"Custom Fields"},{"location":"functions/custom_fields/#adding-custom-fields","text":"In the dashboard, go to Settings > Global Settings > Custom Fields and click Add Custom Field . Info Everything between {{}} is CaSe sEnSiTive The following options are available to configure on custom fields: Model - This is the object that the custom field will be added to. The available options are: Agent Site Client Name - Sets the name of the custom field. This will be used to identify the custom field in the dashboard and in scripts. Field Type - Sets the type of field. Below are the allowed types. Text Number Single select dropdown Multi-select dropdown Checkbox DateTime Input Options - Only available on Single and Multiple-select dropdowns . Sets the options to choose from. Default Value - If no value is found when looking up the custom field; this value will instead be supplied. Required - This makes the field required when adding new Clients, Sites, and Agents. If this is set a default value will need to be set as well Hide in Dashboard - This will not show the custom field in Client, Site, and Agent forms in the dashboard. This is useful if the custom field's value is updated by a collector task and only supplied to scripts.","title":"Adding Custom Fields"},{"location":"functions/custom_fields/#using-custom-fields-in-the-dashboard","text":"Once the custom fields are added, they will show up in the Client, Site, and Agent Add/Edit forms.","title":"Using Custom Fields in the Dashboard"},{"location":"functions/custom_fields/#using-custom-fields-in-scripts","text":"Tactical RMM allows for passing various database fields for Clients, Sites, and Agents in scripts. This includes custom fields as well! Warning The characters within the brackets is case-sensitive! In your script's arguments, use the notation {{client.AV_KEY}} . This will lookup the client for the agent that the script is running on and find the custom field named AV_KEY and replace that with the value. The same is also true for {{site.no_patching}} and {{agent.Another Field}} For more information see SCRIPTING PAGE","title":"Using Custom Fields in Scripts"},{"location":"functions/custom_fields/#populating-custom-fields-automatically","text":"Tactical RMM supports automatically collecting information and saving them directly to custom fields. This is made possible by creating Collector Tasks . These are just normal Automated Tasks, but instead they will save the last line of the standard output to the custom field that is selected. Info To populate a multiple select custom field, return a string with the options separated by a comma \"This,will,be,an,array\" For more information See Collector Tasks","title":"Populating Custom Fields automatically"},{"location":"functions/database_maintenance/","text":"Database Maintenance \u00b6 Tactical RMM ships with data retention defaults that will work fine for most environments. There are situations, depending on the number of agents and checks configured, that these defaults need to be tweaked to improve performance. Adjusting Data Retention \u00b6 In the dashboard, go to Settings > Global Settings > Retention The options are: Check History - Will delete check history older than the days specified (default is 30 days). Resolved Alerts - Will delete alerts that have been resolved older than the days specified (default is disabled). Agent History - Will delete agent command/script history older than the days specified (default is 60 days). Debug Logs - Will delete agent debug logs older than the days specified (default is 30 days) Audit Logs Will delete Tactical RMM audit logs older than the days specified (default is disabled) To disable database pruning on a table, set the days to 0.","title":"Database Maintenace"},{"location":"functions/database_maintenance/#database-maintenance","text":"Tactical RMM ships with data retention defaults that will work fine for most environments. There are situations, depending on the number of agents and checks configured, that these defaults need to be tweaked to improve performance.","title":"Database Maintenance"},{"location":"functions/database_maintenance/#adjusting-data-retention","text":"In the dashboard, go to Settings > Global Settings > Retention The options are: Check History - Will delete check history older than the days specified (default is 30 days). Resolved Alerts - Will delete alerts that have been resolved older than the days specified (default is disabled). Agent History - Will delete agent command/script history older than the days specified (default is 60 days). Debug Logs - Will delete agent debug logs older than the days specified (default is 30 days) Audit Logs Will delete Tactical RMM audit logs older than the days specified (default is disabled) To disable database pruning on a table, set the days to 0.","title":"Adjusting Data Retention"},{"location":"functions/django_admin/","text":"Django Admin \u00b6 Warning Do not use the django admin unless you really know what you're doing. You should never need to access it unless you are familiar with django or are instructed to do something here by one of the developers. The django admin is basically a web interface for the postgres database. As of Tactical RMM v0.4.19, the django admin is disabled by default. To enable it, edit /rmm/api/tacticalrmm/tacticalrmm/local_settings.py and change ADMIN_ENABLED from False to True then sudo systemctl restart rmm Login to the django admin using the same credentials as your normal web ui login. If you did not save the django admin url (which was printed out at the end of the install script), check the local_settings.py file referenced above for the ADMIN_URL variable. Then simply append the value of this variable to your api domain ( https://api.yourdomain.com/ ) to get the full url. Example of a full django admin url: https://api.example.com/JwboKNYb3v6K93Fvtcz0G3vUM17LMTSZggOUAxa97jQfAh0P5xosEk7u2PPkjEfdOtucUp/","title":"Django Admin"},{"location":"functions/django_admin/#django-admin","text":"Warning Do not use the django admin unless you really know what you're doing. You should never need to access it unless you are familiar with django or are instructed to do something here by one of the developers. The django admin is basically a web interface for the postgres database. As of Tactical RMM v0.4.19, the django admin is disabled by default. To enable it, edit /rmm/api/tacticalrmm/tacticalrmm/local_settings.py and change ADMIN_ENABLED from False to True then sudo systemctl restart rmm Login to the django admin using the same credentials as your normal web ui login. If you did not save the django admin url (which was printed out at the end of the install script), check the local_settings.py file referenced above for the ADMIN_URL variable. Then simply append the value of this variable to your api domain ( https://api.yourdomain.com/ ) to get the full url. Example of a full django admin url: https://api.example.com/JwboKNYb3v6K93Fvtcz0G3vUM17LMTSZggOUAxa97jQfAh0P5xosEk7u2PPkjEfdOtucUp/","title":"Django Admin"},{"location":"functions/email_alert/","text":"Email Setup \u00b6 Under Settings > Global Settings > Email Alerts Setting up Tactical RMM Alerts using Open Relay \u00b6 MS 365 in this example Log into Tactical RMM Go to Settings Go to Global Settings Click on Alerts Enter the email address (or addresses) you want to receive alerts to eg info@mydomain.com Enter the from email address (this will need to be part of your domain on 365, however it doesn\u2019t need a license) eg rmm@mydomain.com Go to MXToolbox.com and enter your domain name in, copy the hostname from there and paste into Host Change the port to 25 Click Save Login to admin.microsoft.com Go to Exchange Admin Centre Go to \u201cConnectors\u201d under \u201cMail Flow\u201d Click to + button In From: select \u201cYour organisations email server\u201d In To: select \u201cOffice 365\u201d Click Next In the Name type in RMM Click By Verifying that the IP address\u2026\u2026 Click + Enter your IP and Click OK Click Next Click OK Setting up Tactical RMM Alerts using username & password \u00b6 Gmail in this example Log into Tactical RMM Go to Settings Go to Global Settings Click on Alerts Enter the email address (or addresses) you want to receive alerts to eg info@mydomain.com Enter the from email address myrmm@gmail.com Tick the box \u201cMy server requires Authentication\u201d Enter your username e.g. myrmm@gmail.com Enter your password Change the port to 587 Click Save","title":"Email Setup"},{"location":"functions/email_alert/#email-setup","text":"Under Settings > Global Settings > Email Alerts","title":"Email Setup"},{"location":"functions/email_alert/#setting-up-tactical-rmm-alerts-using-open-relay","text":"MS 365 in this example Log into Tactical RMM Go to Settings Go to Global Settings Click on Alerts Enter the email address (or addresses) you want to receive alerts to eg info@mydomain.com Enter the from email address (this will need to be part of your domain on 365, however it doesn\u2019t need a license) eg rmm@mydomain.com Go to MXToolbox.com and enter your domain name in, copy the hostname from there and paste into Host Change the port to 25 Click Save Login to admin.microsoft.com Go to Exchange Admin Centre Go to \u201cConnectors\u201d under \u201cMail Flow\u201d Click to + button In From: select \u201cYour organisations email server\u201d In To: select \u201cOffice 365\u201d Click Next In the Name type in RMM Click By Verifying that the IP address\u2026\u2026 Click + Enter your IP and Click OK Click Next Click OK","title":"Setting up Tactical RMM Alerts using Open Relay"},{"location":"functions/email_alert/#setting-up-tactical-rmm-alerts-using-username-password","text":"Gmail in this example Log into Tactical RMM Go to Settings Go to Global Settings Click on Alerts Enter the email address (or addresses) you want to receive alerts to eg info@mydomain.com Enter the from email address myrmm@gmail.com Tick the box \u201cMy server requires Authentication\u201d Enter your username e.g. myrmm@gmail.com Enter your password Change the port to 587 Click Save","title":"Setting up Tactical RMM Alerts using username &amp; password"},{"location":"functions/examples/","text":"Examples \u00b6 Create Run URL Action to Computer support page \u00b6 This will create a URL link that will take you to the support page for a computer based on the computers Serial Number Goto Settings | Global Settings | Custom Fields Under Agents tab Add Custom Field (CaSe SeNsItIve) Create Task (best to use Settings | Automation Manager if you want to apply it to all computers). Add script that has an output of the data you want. Create URL Action (under Settings | Global Settings | URL ACTIONS ) for Manufacturer websites Dell Support Page https://www.dell.com/support/home/en-us/product-support/servicetag/{{agent.SerialNumber}}/overview Lenovo Support Page https://www.dell.com/support/home/en-us/product-support/servicetag/{{agent.SerialNumber}}/overview","title":"Examples"},{"location":"functions/examples/#examples","text":"","title":"Examples"},{"location":"functions/examples/#create-run-url-action-to-computer-support-page","text":"This will create a URL link that will take you to the support page for a computer based on the computers Serial Number Goto Settings | Global Settings | Custom Fields Under Agents tab Add Custom Field (CaSe SeNsItIve) Create Task (best to use Settings | Automation Manager if you want to apply it to all computers). Add script that has an output of the data you want. Create URL Action (under Settings | Global Settings | URL ACTIONS ) for Manufacturer websites Dell Support Page https://www.dell.com/support/home/en-us/product-support/servicetag/{{agent.SerialNumber}}/overview Lenovo Support Page https://www.dell.com/support/home/en-us/product-support/servicetag/{{agent.SerialNumber}}/overview","title":"Create Run URL Action to Computer support page"},{"location":"functions/keystore/","text":"Global Key Store \u00b6 The key store is used to store values that need to be referenced from multiple scripts. This also allows for easy updating of values since scripts reference the values at runtime. To Add/Edit values in the Global Key Store, browse to Settings > Global Settings > KeyStore . You can reference values from the key store in script arguments by using the {{global.key_name}} syntax. Info Everything between {{}} is CaSe sEnSiTive See Scripts for more information.","title":"Global Keystore"},{"location":"functions/keystore/#global-key-store","text":"The key store is used to store values that need to be referenced from multiple scripts. This also allows for easy updating of values since scripts reference the values at runtime. To Add/Edit values in the Global Key Store, browse to Settings > Global Settings > KeyStore . You can reference values from the key store in script arguments by using the {{global.key_name}} syntax. Info Everything between {{}} is CaSe sEnSiTive See Scripts for more information.","title":"Global Key Store"},{"location":"functions/maintenance_mode/","text":"Maintenance Mode \u00b6 Enabling maintenance mode for an agent will prevent any overdue/check/task email/sms alerts from being sent. It will also prevent clients/sites/agents from showing up as red in the dashboard if they have any failing checks or are overdue. To enable maintenance mode for all agents in a client/site, Right Click on a client / site and choose Enable Maintenance Mode To enable maintenance mode for a single agent, Right Click on the agent and choose Enable Maintenance Mode","title":"Maintenance Mode"},{"location":"functions/maintenance_mode/#maintenance-mode","text":"Enabling maintenance mode for an agent will prevent any overdue/check/task email/sms alerts from being sent. It will also prevent clients/sites/agents from showing up as red in the dashboard if they have any failing checks or are overdue. To enable maintenance mode for all agents in a client/site, Right Click on a client / site and choose Enable Maintenance Mode To enable maintenance mode for a single agent, Right Click on the agent and choose Enable Maintenance Mode","title":"Maintenance Mode"},{"location":"functions/remote_bg/","text":"Remote Background \u00b6 To access: Right click on an agent > Remote Background Services Tab \u00b6 Right click on a service to show the context menu where you can start/stop/restart services: Click Service Details to bring up the details tab where you can edit more service options: Processes Tab \u00b6 A very basic task manager that shows real time process usage. Right click on a process to end the task:","title":"Remote Background"},{"location":"functions/remote_bg/#remote-background","text":"To access: Right click on an agent > Remote Background","title":"Remote Background"},{"location":"functions/remote_bg/#services-tab","text":"Right click on a service to show the context menu where you can start/stop/restart services: Click Service Details to bring up the details tab where you can edit more service options:","title":"Services Tab"},{"location":"functions/remote_bg/#processes-tab","text":"A very basic task manager that shows real time process usage. Right click on a process to end the task:","title":"Processes Tab"},{"location":"functions/scripting/","text":"Scripting \u00b6 Tactical RMM supports uploading existing scripts or adding new scripts right in the dashboard. Languages supported are: Powershell Windows Batch Python Adding Scripts \u00b6 In the dashboard, browse to Settings > Scripts Manager . Click the New button and select either Upload Script or New Script. The available options for scripts are: Name - This identifies the script in the dashboard Description - Optional description for the script Category - Optional way to group similar scripts together. Type - This sets the language of the script. Available options are: Powershell Windows Batch Python Script Arguments - Optional way to set default arguments for scripts. These will autopopulate when running scripts and can be changed at runtime. Default Timeout - Sets the default timeout of the script and will stop script execution if the duration surpasses the configured timeout. Can be changed at script runtime Favorite - Favorites the script. Downloading Scripts \u00b6 To download a Tactical RMM Script, click on the script in the Script Manager to select it. Then click the Download Script button on the top. You can also right-click on the script and select download Community Scripts \u00b6 These are script that are built into Tactical RMM. They are provided and mantained by the Tactical RMM community. These scripts are updated whenever Tactical RMM is updated and can't be modified or deleted in the dashboard. Hiding Community Scripts \u00b6 You can choose to hide community script throughout the dashboard by opening Script Manager and clicking the Show/Hide Community Scripts toggle button. Using Scripts \u00b6 Manual run on agent \u00b6 In the Agent Table , you can right-click on an agent and select Run Script . You have the options of: Wait for Output - Runs the script and waits for the script to finish running and displays the output. Fire and Forget - Starts the script and does not wait for output. Email Output - Starts the script and will email the output. Allows for using the default email address in the global settings or adding a new email address. Save as Note - Saves the output as a Note that can be views in the agent Notes tab Collector - Saves to output to the specified custom field. There is also an option on the agent context menu called Run Favorited Script . This will essentially Fire and Forget the script with default args and timeout. Bulk Run on agents \u00b6 Tactical RMM offers a way to run a script on multiple agents at once. Browse to Tools > Bulk Script and select the target for the script to run. Automated Tasks \u00b6 Tactical RMM allows scheduling tasks to run on agents. This leverages the Windows Task Scheduler and has the same scheduling options. See Automated Tasks for configuring automated tasks Script Checks \u00b6 Scripts can also be run periodically on an agent and trigger an alert if it fails. Alert Failure/Resolve Actions \u00b6 Scripts can be triggered when an alert is triggered and resolved. This script will run on any online agent and supports passing the alert information as arguments. For configuring Alert Templates , see Alerting See below for populating dashboard data in scripts and the available options. Using dashboard data in scripts \u00b6 Tactical RMM allows passing in dashboard data to scripts as arguments. The below powershell arguments will get the client name of the agent and also the agent's public IP address -ClientName {{client.name}} -PublicIP {{agent.public_ip}} Info Everything between {{}} is CaSe sEnSiTive See a full list of available options Here Getting Custom Field values \u00b6 Tactical RMM supports pulling data from custom fields using the {{model.custom_field_name}} syntax. See Using Custom Fields in Scripts Getting values from the Global Keystore \u00b6 Tactical RMM supports getting values from the global key store using the {{global.key_name}} syntax See Global Keystore . Example Powershell Script \u00b6 The below script takes five named values. The arguments will look like this: -SiteName {{site.name}} -ClientName {{client.name}} -PublicIP {{agent.public_ip}} -CustomField {{client.AV_KEY}} -Global {{global.API_KEY}} param ( [string] $SiteName , [string] $ClientName , [string] $PublicIp , [string] $CustomField , [string] $Global ) Write-Output \"Site: $SiteName\" Write-Output \"Client: $ClientName\" Write-Output \"Public IP: $PublicIp\" Write-Output \"Custom Fields: $CustomField\" Write-Output \"Global: $Global\" Script Snippets \u00b6 Script Snippets allow you to create common code blocks or comments and apply them to all of your scripts. This could be initialization code, common error checking, or even code comments. Adding Script Snippets \u00b6 In the dashboard, browse to Settings > Scripts Manager . Click the Script Snippets button. Name - This identifies the script snippet in the dashboard Description - Optional description for the script snippet Shell - This sets the language of the script. Available options are: Powershell Windows Batch Python Using Script Snippets \u00b6 When editing a script, you can add template tags to the script body that contains the script snippet name. For example, if a script snippet exists with the name \"Check WMF\", you would put {{Check WMF}} in the script body and the snippet code will be replaced. Info Everything between {{}} is CaSe sEnSiTive The template tags will only be visible when Editing the script. When downloading or viewing the script code the template tags will be replaced with the script snippet code.","title":"Scripting"},{"location":"functions/scripting/#scripting","text":"Tactical RMM supports uploading existing scripts or adding new scripts right in the dashboard. Languages supported are: Powershell Windows Batch Python","title":"Scripting"},{"location":"functions/scripting/#adding-scripts","text":"In the dashboard, browse to Settings > Scripts Manager . Click the New button and select either Upload Script or New Script. The available options for scripts are: Name - This identifies the script in the dashboard Description - Optional description for the script Category - Optional way to group similar scripts together. Type - This sets the language of the script. Available options are: Powershell Windows Batch Python Script Arguments - Optional way to set default arguments for scripts. These will autopopulate when running scripts and can be changed at runtime. Default Timeout - Sets the default timeout of the script and will stop script execution if the duration surpasses the configured timeout. Can be changed at script runtime Favorite - Favorites the script.","title":"Adding Scripts"},{"location":"functions/scripting/#downloading-scripts","text":"To download a Tactical RMM Script, click on the script in the Script Manager to select it. Then click the Download Script button on the top. You can also right-click on the script and select download","title":"Downloading Scripts"},{"location":"functions/scripting/#community-scripts","text":"These are script that are built into Tactical RMM. They are provided and mantained by the Tactical RMM community. These scripts are updated whenever Tactical RMM is updated and can't be modified or deleted in the dashboard.","title":"Community Scripts"},{"location":"functions/scripting/#hiding-community-scripts","text":"You can choose to hide community script throughout the dashboard by opening Script Manager and clicking the Show/Hide Community Scripts toggle button.","title":"Hiding Community Scripts"},{"location":"functions/scripting/#using-scripts","text":"","title":"Using Scripts"},{"location":"functions/scripting/#manual-run-on-agent","text":"In the Agent Table , you can right-click on an agent and select Run Script . You have the options of: Wait for Output - Runs the script and waits for the script to finish running and displays the output. Fire and Forget - Starts the script and does not wait for output. Email Output - Starts the script and will email the output. Allows for using the default email address in the global settings or adding a new email address. Save as Note - Saves the output as a Note that can be views in the agent Notes tab Collector - Saves to output to the specified custom field. There is also an option on the agent context menu called Run Favorited Script . This will essentially Fire and Forget the script with default args and timeout.","title":"Manual run on agent"},{"location":"functions/scripting/#bulk-run-on-agents","text":"Tactical RMM offers a way to run a script on multiple agents at once. Browse to Tools > Bulk Script and select the target for the script to run.","title":"Bulk Run on agents"},{"location":"functions/scripting/#automated-tasks","text":"Tactical RMM allows scheduling tasks to run on agents. This leverages the Windows Task Scheduler and has the same scheduling options. See Automated Tasks for configuring automated tasks","title":"Automated Tasks"},{"location":"functions/scripting/#script-checks","text":"Scripts can also be run periodically on an agent and trigger an alert if it fails.","title":"Script Checks"},{"location":"functions/scripting/#alert-failureresolve-actions","text":"Scripts can be triggered when an alert is triggered and resolved. This script will run on any online agent and supports passing the alert information as arguments. For configuring Alert Templates , see Alerting See below for populating dashboard data in scripts and the available options.","title":"Alert Failure/Resolve Actions"},{"location":"functions/scripting/#using-dashboard-data-in-scripts","text":"Tactical RMM allows passing in dashboard data to scripts as arguments. The below powershell arguments will get the client name of the agent and also the agent's public IP address -ClientName {{client.name}} -PublicIP {{agent.public_ip}} Info Everything between {{}} is CaSe sEnSiTive See a full list of available options Here","title":"Using dashboard data in scripts"},{"location":"functions/scripting/#getting-custom-field-values","text":"Tactical RMM supports pulling data from custom fields using the {{model.custom_field_name}} syntax. See Using Custom Fields in Scripts","title":"Getting Custom Field values"},{"location":"functions/scripting/#getting-values-from-the-global-keystore","text":"Tactical RMM supports getting values from the global key store using the {{global.key_name}} syntax See Global Keystore .","title":"Getting values from the Global Keystore"},{"location":"functions/scripting/#example-powershell-script","text":"The below script takes five named values. The arguments will look like this: -SiteName {{site.name}} -ClientName {{client.name}} -PublicIP {{agent.public_ip}} -CustomField {{client.AV_KEY}} -Global {{global.API_KEY}} param ( [string] $SiteName , [string] $ClientName , [string] $PublicIp , [string] $CustomField , [string] $Global ) Write-Output \"Site: $SiteName\" Write-Output \"Client: $ClientName\" Write-Output \"Public IP: $PublicIp\" Write-Output \"Custom Fields: $CustomField\" Write-Output \"Global: $Global\"","title":"Example Powershell Script"},{"location":"functions/scripting/#script-snippets","text":"Script Snippets allow you to create common code blocks or comments and apply them to all of your scripts. This could be initialization code, common error checking, or even code comments.","title":"Script Snippets"},{"location":"functions/scripting/#adding-script-snippets","text":"In the dashboard, browse to Settings > Scripts Manager . Click the Script Snippets button. Name - This identifies the script snippet in the dashboard Description - Optional description for the script snippet Shell - This sets the language of the script. Available options are: Powershell Windows Batch Python","title":"Adding Script Snippets"},{"location":"functions/scripting/#using-script-snippets","text":"When editing a script, you can add template tags to the script body that contains the script snippet name. For example, if a script snippet exists with the name \"Check WMF\", you would put {{Check WMF}} in the script body and the snippet code will be replaced. Info Everything between {{}} is CaSe sEnSiTive The template tags will only be visible when Editing the script. When downloading or viewing the script code the template tags will be replaced with the script snippet code.","title":"Using Script Snippets"},{"location":"functions/settings_override/","text":"Settings Override \u00b6 Browser token expiration \u00b6 The default browser token expiration is set to 5 hours. See this ticket for reference. To change it, add the following code block to the end of /rmm/api/tacticalrmm/tacticalrmm/local_settings.py from datetime import timedelta REST_KNOX = { \"TOKEN_TTL\" : timedelta ( days = 30 ), \"AUTO_REFRESH\" : True , \"MIN_REFRESH_INTERVAL\" : 600 , } Change (days=30) to whatever you prefer. Then run sudo systemctl restart rmm for changes to take effect.","title":"Settings Override"},{"location":"functions/settings_override/#settings-override","text":"","title":"Settings Override"},{"location":"functions/settings_override/#browser-token-expiration","text":"The default browser token expiration is set to 5 hours. See this ticket for reference. To change it, add the following code block to the end of /rmm/api/tacticalrmm/tacticalrmm/local_settings.py from datetime import timedelta REST_KNOX = { \"TOKEN_TTL\" : timedelta ( days = 30 ), \"AUTO_REFRESH\" : True , \"MIN_REFRESH_INTERVAL\" : 600 , } Change (days=30) to whatever you prefer. Then run sudo systemctl restart rmm for changes to take effect.","title":"Browser token expiration"},{"location":"functions/url_actions/","text":"URL Actions \u00b6 URL Actions will run against an agent and open a configured URL in a new browser tab or window. This allows for integrations with various remote viewing softwares. Adding URL Actions \u00b6 In the dashboard, browse to Settings > Global Settings > URL Actions . The available options are: Name - This identifies the URL Action in other parts of the dashboard Description - Optional description for the URL Action Pattern - This is the actual URL pattern that will open in the new browser tab/window. This field supports variables from the Global Keystore and Script Variables . URL Pattern Example \u00b6 Info Variable names are case sensitive ! https://remote.example.com/connect?API_KEY={{global.API_KEY}}&agent_id={{agent.Remote ID}} The above example uses a value defined in the global keystore named API_KEY and an Agent custom field called remote id . The URLs are properly encoded to work with any special characters or spaces returned in the values. Running URL Actions \u00b6 In the agent table, right-click on the Agent and select Run URL Action and select the action to run","title":"URL Actions"},{"location":"functions/url_actions/#url-actions","text":"URL Actions will run against an agent and open a configured URL in a new browser tab or window. This allows for integrations with various remote viewing softwares.","title":"URL Actions"},{"location":"functions/url_actions/#adding-url-actions","text":"In the dashboard, browse to Settings > Global Settings > URL Actions . The available options are: Name - This identifies the URL Action in other parts of the dashboard Description - Optional description for the URL Action Pattern - This is the actual URL pattern that will open in the new browser tab/window. This field supports variables from the Global Keystore and Script Variables .","title":"Adding URL Actions"},{"location":"functions/url_actions/#url-pattern-example","text":"Info Variable names are case sensitive ! https://remote.example.com/connect?API_KEY={{global.API_KEY}}&agent_id={{agent.Remote ID}} The above example uses a value defined in the global keystore named API_KEY and an Agent custom field called remote id . The URLs are properly encoded to work with any special characters or spaces returned in the values.","title":"URL Pattern Example"},{"location":"functions/url_actions/#running-url-actions","text":"In the agent table, right-click on the Agent and select Run URL Action and select the action to run","title":"Running URL Actions"},{"location":"functions/user_ui/","text":"User Interface Preferences \u00b6 Click on your username at the top right of the dashboard > Preferences:","title":"User Interface Preferences"},{"location":"functions/user_ui/#user-interface-preferences","text":"Click on your username at the top right of the dashboard > Preferences:","title":"User Interface Preferences"}]}